searchState.loadedDescShard("cs431_homework", 3, "Performs a serializing operation on all non-temporal (“…\nPerforms an intermediate calculation for the next four …\nPerforms the final calculation for the next four SHA1 …\nCalculate SHA1 state variable E after four rounds of …\nPerforms four rounds of SHA1 operation using an initial …\nPerforms an intermediate calculation for the next four …\nPerforms the final calculation for the next four SHA256 …\nPerforms 2 rounds of SHA256 operation using an initial …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffles 32-bit integers in <code>a</code> using the control in <code>IMM8</code>.\nShuffles bytes from <code>a</code> according to the content of <code>b</code>.\nConstructs a 128-bit floating-point vector of <code>[2 x double]</code> …\nShuffles packed single-precision (32-bit) floating-point …\nShuffles 16-bit integers in the high 64 bits of <code>a</code> using …\nShuffles 16-bit integers in the low 64 bits of <code>a</code> using the …\nNegates packed 16-bit integers in <code>a</code> when the corresponding …\nNegates packed 32-bit integers in <code>a</code> when the corresponding …\nNegates packed 8-bit integers in <code>a</code> when the corresponding …\nShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.\nShift packed 16-bit integers in a left by the amount …\nShifts packed 32-bit integers in <code>a</code> left by the amount …\nShifts packed 64-bit integers in <code>a</code> left by the amount …\nThis is one of the two SM3 message scheduling intrinsics. …\nThis is one of the two SM3 message scheduling intrinsics. …\nThe intrinsic performs two rounds of SM3 operation using …\nThis intrinsic performs four rounds of SM4 key expansion. …\nThis intrinsic performs four rounds of SM4 encryption. The …\nReturns a new vector with the square root of each of the …\nCompute the square root of packed half-precision (16-bit) …\nReturns the square root of packed single-precision …\nCompute the square root of the lower double-precision …\nCompute the square root of the lower half-precision …\nCompute the square root of the lower single-precision …\nReturns a new vector with the low element of <code>a</code> replaced by …\nCompute the square root of the lower half-precision …\nReturns the square root of the first single-precision …\nShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …\nShift packed 64-bit integers in a right by count while …\nShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShifts packed 32-bit integers in <code>a</code> right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.\nShift packed 16-bit integers in a right by the amount …\nShifts packed 32-bit integers in <code>a</code> right by the amount …\nShifts packed 64-bit integers in <code>a</code> right by the amount …\nStores the lower double-precision (64-bit) floating-point …\nStores the lowest 32 bit float of <code>a</code> repeated four times …\nStore 128-bits (composed of 4 packed 32-bit integers) from …\nStore 128-bits (composed of 2 packed 64-bit integers) from …\nStores 128-bits (composed of 2 packed double-precision …\nStores the lower double-precision (64-bit) floating-point …\nStore 128-bits (composed of 8 packed half-precision …\nStores four 32-bit floats into <em>aligned</em> memory.\nAlias for <code>_mm_store1_ps</code>\nStores the lower 64 bits of a 128-bit vector of …\nStore the lower half-precision (16-bit) floating-point …\nStores 128-bits of integer data from <code>a</code> into memory.\nStores the lowest 32 bit float of <code>a</code> into memory.\nStores the upper 64 bits of a 128-bit vector of …\nStores the lower 64-bit integer <code>a</code> to a memory location.\nStores the lower 64 bits of a 128-bit vector of …\nStores 2 double-precision (64-bit) floating-point elements …\nStores four 32-bit floats into <em>aligned</em> memory in reverse …\nStore 128-bits (composed of 8 packed 16-bit integers) from …\nStore 128-bits (composed of 4 packed 32-bit integers) from …\nStore 128-bits (composed of 2 packed 64-bit integers) from …\nStore 128-bits (composed of 16 packed 8-bit integers) from …\nStores 128-bits (composed of 2 packed double-precision …\nStore 128-bits (composed of 8 packed half-precision …\nStores four 32-bit floats into memory. There are no …\nStores 128-bits of integer data from <code>a</code> into memory.\nStore 16-bit integer from the first element of a into …\nStore 32-bit integer from the first element of a into …\nStore 64-bit integer from the first element of a into …\nLoad 128-bits of integer data from memory into dst. …\nStores a 128-bit floating point vector of <code>[2 x double]</code> to …\nStores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …\nNon-temporal store of <code>a.0</code> into <code>p</code>.\nStores a 128-bit integer vector to a 128-bit aligned …\nStores a 32-bit integer value in the specified memory …\nStores a 64-bit integer value in the specified memory …\nNon-temporal store of <code>a.0</code> into <code>p</code>.\nSubtracts packed 16-bit integers in <code>b</code> from packed 16-bit …\nSubtract packed 32-bit integers in <code>b</code> from packed 32-bit …\nSubtract packed 64-bit integers in <code>b</code> from packed 64-bit …\nSubtracts packed 8-bit integers in <code>b</code> from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtracts packed single-precision (32-bit) floating-point …\nSubtract the lower double-precision (64-bit) …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtract the lower single-precision (32-bit) …\nReturns a new vector with the low element of <code>a</code> replaced by …\nSubtract the lower half-precision (16-bit) floating-point …\nSubtracts the first component of <code>b</code> from <code>a</code>, the other …\nSubtract packed 16-bit integers in <code>b</code> from packed 16-bit …\nSubtract packed 8-bit integers in <code>b</code> from packed 8-bit …\nSubtract packed unsigned 16-bit integers in <code>b</code> from packed …\nSubtract packed unsigned 8-bit integers in <code>b</code> from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nTests whether the specified bits in <code>a</code> 128-bit integer …\nTests whether the specified bits in a 128-bit integer …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nTests whether the specified bits in a 128-bit integer …\nComputes the bitwise AND of 128 bits (representing …\nComputes the bitwise AND of 128 bits (representing …\nTests whether the specified bits in a 128-bit integer …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nComputes the bitwise AND of 128 bits (representing …\nComputes the bitwise AND of 128 bits (representing …\nTests whether the specified bits in a 128-bit integer …\nComputes the bitwise AND of 128 bits (representing …\nComputes the bitwise AND of 128 bits (representing …\nTests whether the specified bits in a 128-bit integer …\nCounts the number of trailing least significant zero bits.\nCounts the number of trailing least significant zero bits.\nCompares the lower element of <code>a</code> and <code>b</code> for equality.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for …\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for greater-than.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for …\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for less-than.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nCompares the lower element of <code>a</code> and <code>b</code> for not-equal.\nCompare the lower half-precision (16-bit) floating-point …\nCompares two 32-bit floats from the low-order bits of <code>a</code> …\nReturns vector of type __m128d with indeterminate …\nReturn vector of type <code>__m128h</code> with indetermination …\nReturns vector of type __m128 with indeterminate …\nReturns vector of type __m128i with indeterminate …\nUnpacks and interleave 16-bit integers from the high half …\nUnpacks and interleave 32-bit integers from the high half …\nUnpacks and interleave 64-bit integers from the high half …\nUnpacks and interleave 8-bit integers from the high half …\nThe resulting <code>__m128d</code> element is composed by the low-order …\nUnpacks and interleave single-precision (32-bit) …\nUnpacks and interleave 16-bit integers from the low half …\nUnpacks and interleave 32-bit integers from the low half …\nUnpacks and interleave 64-bit integers from the low half …\nUnpacks and interleave 8-bit integers from the low half of …\nThe resulting <code>__m128d</code> element is composed by the …\nUnpacks and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nComputes the bitwise XOR of <code>a</code> and <code>b</code>.\nBitwise exclusive OR of packed single-precision (32-bit) …\nComputes the bitwise XOR of 128 bits (representing integer …\nUnsigned multiply without affecting flags.\nUnsigned multiply without affecting flags.\nScatter contiguous low order bits of <code>a</code> to the result at …\nScatter contiguous low order bits of <code>a</code> to the result at …\nGathers the bits of <code>x</code> specified by the <code>mask</code> into the …\nGathers the bits of <code>x</code> specified by the <code>mask</code> into the …\nCounts the bits that are set.\nCounts the bits that are set.\nRead a hardware generated 16-bit random value and store …\nRead a hardware generated 32-bit random value and store …\nRead a hardware generated 64-bit random value and store …\nRead a 16-bit NIST SP800-90B and SP800-90C compliant …\nRead a 32-bit NIST SP800-90B and SP800-90C compliant …\nRead a 64-bit NIST SP800-90B and SP800-90C compliant …\nReads the current value of the processor’s time-stamp …\nStore 16-bit mask to memory\nStore 32-bit mask from a into memory.\nStore 64-bit mask from a into memory.\nStore 8-bit mask to memory\nAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …\nClears all bits below the least significant zero of <code>x</code> and …\nClears all bits below the least significant zero of <code>x</code> and …\nPerform matrix multiplication of two tiles containing …\nPerform matrix multiplication of two tiles containing …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of bytes in tiles with a …\nCompute dot-product of FP16 (16-bit) floating-point pairs …\nLoad tile configuration from a 64-byte memory location …\nLoad tile rows from memory specifieid by base address and …\nRelease the tile configuration to return to the init …\nStores the current tile configuration to a 64-byte memory …\nStore the tile specified by src to memory specifieid by …\nLoad tile rows from memory specifieid by base address and …\nZero the tile specified by tdest.\nCounts the number of trailing least significant zero bits.\nCounts the number of trailing least significant zero bits.\nCounts the number of trailing least significant zero bits.\nSets all bits below the least significant one of <code>x</code> and …\nSets all bits below the least significant one of <code>x</code> and …\nForces a restricted transactional memory (RTM) region to …\nRetrieves the parameter passed to <code>_xabort</code> when <code>_xbegin</code>’s …\nSpecifies the start of a restricted transactional memory …\nSpecifies the end of a restricted transactional memory …\nReads the contents of the extended control register <code>XCR</code> …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial restore of the enabled …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nPerforms a full or partial save of the enabled processor …\nCopies 64-bits from <code>val</code> to the extended control register (…\nQueries whether the processor is executing in a …\nThe BFloat16 type used in AVX-512 intrinsics.\nCompares and exchange 16 bytes (128 bits) of data …\nEAX register.\nEBX register.\nECX register.\nEDX register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRaw transmutation from <code>u16</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaw transmutation to <code>u16</code>\nA by-value array iterator.\nThe error type returned when a conversion from a slice to …\nReturns a mutable slice of all elements that have not been …\nReturns an immutable slice of all elements that have not …\nCreates an iterator over <code>T</code> which returns no elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an array where each element is produced by calling …\nConverts a mutable reference to <code>T</code> into a mutable reference …\nConverts a reference to <code>T</code> into a reference to an array of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new iterator over the given <code>array</code>.\nCreates an iterator over the elements in a …\nCreates an array of type <code>[T; N]</code> by repeatedly cloning a …\nCreates an array <code>[T; N]</code> where each fallible array element <code>T</code>…\nU+0006\nU+0026\nU+0027\nExtension methods for ASCII-subset only operations.\nU+002A\nU+0008\nU+0007\nU+0018\nU+0041\nU+0042\nU+0043\nU+0044\nU+0045\nU+0046\nU+0047\nU+0048\nU+0049\nU+004A\nU+004B\nU+004C\nU+004D\nU+004E\nU+004F\nU+0050\nU+0051\nU+0052\nU+0053\nU+0054\nU+0055\nU+0056\nU+0057\nU+0058\nU+0059\nU+005A\nU+000D\nOne of the 128 Unicode characters from U+0000 through …\nU+0009\nU+005E\nU+003A\nU+002C\nU+0040\nU+0010\nU+007F\nU+0014\nU+0011\nU+0013\nU+0012\nU+0030\nU+0031\nU+0032\nU+0033\nU+0034\nU+0035\nU+0036\nU+0037\nU+0038\nU+0039\nU+0024\nU+0019\nU+0003\nU+0004\nU+0017\nU+0005\nU+003D\nU+001B\nAn iterator over the escaped version of a byte.\nU+0021\nU+000C\nU+002E\nU+0060\nU+003E\nU+002D\nU+001C\nU+001F\nU+001D\nU+001E\nU+007B\nU+0028\nU+005B\nU+003C\nU+000A\nU+000B\nU+005F\nU+0015\nU+0000 (The default variant)\nU+0023\nContainer type for copied ASCII characters.\nU+0025\nU+002B\nU+003F\nU+0022\nU+005C\nU+007D\nU+0029\nU+005D\nU+003B\nU+000F\nU+000E\nU+0061\nU+0062\nU+0063\nU+0064\nU+0065\nU+0066\nU+0067\nU+0068\nU+0069\nU+006A\nU+006B\nU+006C\nU+006D\nU+006E\nU+006F\nU+0070\nU+0071\nU+0072\nU+0073\nU+0074\nU+0075\nU+0076\nU+0077\nU+0078\nU+0079\nU+007A\nU+002F\nU+0020\nU+0001\nU+0002\nU+001A\nU+0016\nU+007E\nU+007C\nViews this ASCII character as a one-code-unit UTF-8 <code>str</code>.\nReturns the default value of <code>Null</code>\nWhen passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …\nWhen passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …\nChecks that two values are an ASCII case-insensitive match.\nReturns an iterator that produces an escaped version of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ascii character from the byte <code>b</code>, or returns <code>None</code>…\nCreates an ASCII character from the byte <code>b</code>, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value is within the ASCII range.\nConverts this type to its ASCII lower case equivalent …\nConverts this type to its ASCII upper case equivalent …\nMakes a copy of the value in its ASCII lower case …\nMakes a copy of the value in its ASCII upper case …\nGets this ASCII character as a <code>char</code> Unicode Scalar Value.\nGets this ASCII character as a byte.\nAsserts that an expression matches the provided pattern.\nAsserts that an expression matches the provided pattern.\nA trait for dealing with asynchronous iterators.\nAn async iterator that was created from iterator.\nThe type of the resulting iterator\nConverts something into an async iterator\nThe type of items yielded by the async iterator.\nThe type of the item yielded by the iterator\nReturns the argument unchanged.\nConverts an iterator into an async iterator.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an async iterator\nAttempts to pull out the next value of this async …\nReturns the bounds on the remaining length of the async …\nThis macro uses forward-mode automatic differentiation to …\nThis macro uses reverse-mode automatic differentiation to …\nA captured OS thread stack backtrace.\nA single frame of a backtrace.\nThe current status of a backtrace, indicating whether it …\nA backtrace has been captured and the <code>Backtrace</code> should …\nCapturing a backtrace has been disabled through either the …\nCapturing a backtrace is not supported, likely because it…\nCaptures a stack backtrace of the current thread.\nForcibly captures a disabled backtrace, regardless of …\nForcibly captures a full backtrace, regardless of …\nReturns an iterator over the backtrace frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the status of this backtrace, indicating whether …\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nMoves the string into a <code>Cow::Owned</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nReturns the argument unchanged.\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nCreates a clone-on-write pointer from an owned instance of …\nCreates a clone-on-write pointer from a reference to …\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nReturns a reference to the underlying allocator.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConstructs a <code>Box&lt;T&gt;</code> by calling the <code>exchange_malloc</code> lang …\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nReturns the argument unchanged.\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a vector into a boxed slice.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nReturns the argument unchanged.\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nA wrapper for <code>&amp;[u8]</code> representing a human-readable string …\nA wrapper for <code>Vec&lt;u8&gt;</code> representing a human-readable string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>ByteStr</code> slice from anything that can be …\nAn error returned by <code>RefCell::try_borrow</code>.\nAn error returned by <code>RefCell::try_borrow_mut</code>.\nA mutable memory location.\nA value which is initialized on the first access.\nA cell which can nominally be written to only once.\nWraps a borrowed reference to a value in a <code>RefCell</code> box. A …\nA mutable memory location with dynamically checked borrow …\nA wrapper type for a mutably borrowed value from a …\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nReturns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>\nGet an exclusive reference to the value within the …\nReturns a raw pointer to the underlying data in this cell.\nReturns a raw pointer to the underlying data in this cell.\nGet a shared reference to the value within the <code>UnsafeCell</code>.\nReturns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>\nImmutably borrows the wrapped value.\nMutably borrows the wrapped value.\nPanics\nCopies a <code>Ref</code>.\nPanics\nPanics\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nPanics\nPanics\nPanics\nMakes a new <code>Ref</code> for an optional component of the borrowed …\nMakes a new <code>RefMut</code> for an optional component of the …\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>OnceCell&lt;T&gt;</code> which already contains the given …\nReturns the argument unchanged.\nCreates a new <code>Cell&lt;T&gt;</code> containing the given value.\nCreates a new <code>RefCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>\nConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.\nPanics\nReturns a reference to the value if initialized. Otherwise …\nGets the reference to the underlying value.\nReturns a copy of the contained value.\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the value if initialized. …\nGets the mutable reference to the underlying value.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nGets the mutable reference of the contents of the cell, …\nGets the mutable reference of the contents of the cell, …\nGets the contents of the cell, initializing it to <code>f()</code> if …\nGets the contents of the cell, initializing it to <code>f()</code> if …\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>LazyCell</code> returning the stored value.\nConsumes the cell, returning the wrapped value.\nUnwraps the value, consuming the cell.\nConsumes the <code>RefCell</code>, returning the wrapped value.\nUnwraps the value, consuming the cell.\nUnwraps the value, consuming the cell.\nPanics\nConverts into a reference to the underlying data.\nConverts into a mutable reference to the underlying data.\nPanics\nMakes a new <code>Ref</code> for a component of the borrowed data.\nMakes a new <code>RefMut</code> for a component of the borrowed data, …\nSplits a <code>Ref</code> into multiple <code>Ref</code>s for different components …\nSplits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …\nCreates a new lazy value with the given initializing …\nCreates a new uninitialized cell.\nCreates a new <code>Cell</code> containing the given value.\nCreates a new <code>RefCell</code> containing <code>value</code>.\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nPanics\nGets a mutable pointer to the wrapped value. The …\nGets a mutable pointer to the wrapped value.\nReplaces the contained value with <code>val</code>, and returns the old …\nReplaces the wrapped value with a new one, returning the …\nReplace the value in this <code>UnsafeCell</code> and return the old …\nReplaces the wrapped value with a new one computed from <code>f</code>, …\nInitializes the contents of the cell to <code>value</code>.\nSets the contained value.\nSwaps the values of two <code>Cell</code>s.\nSwaps the wrapped value of <code>self</code> with the wrapped value of …\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nTakes the value of the cell, leaving <code>Default::default()</code> in …\nTakes the wrapped value, leaving <code>Default::default()</code> in its …\nImmutably borrows the wrapped value, returning an error if …\nMutably borrows the wrapped value, returning an error if …\nImmutably borrows the wrapped value, returning an error if …\nInitializes the contents of the cell to <code>value</code> if the cell …\nUndo the effect of leaked guards on the borrow state of …\nUpdates the contained value using a function.\nThe error type returned when a conversion from <code>u32</code> to <code>char</code> …\nAn iterator that decodes UTF-16 encoded code points from …\nAn error that can be returned when decoding UTF-16 code …\nAn iterator that yields the literal escape code of a <code>char</code>.\nAn iterator that yields the literal escape code of a <code>char</code>.\nReturns an iterator that yields the hexadecimal Unicode …\nThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>…\nThe maximum number of two-byte units required to encode a …\nThe maximum number of bytes required to encode a <code>char</code> to …\nAn error which can be returned when parsing a char.\n<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …\nReturns an iterator that yields the lowercase equivalent …\nReturns an iterator that yields the uppercase equivalent …\nThe error type returned when a checked char conversion …\nThe version of Unicode that the Unicode parts of <code>char</code> and …\nCreates an iterator over the UTF-16 encoded code points in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a digit in the given radix to a <code>char</code>. Use …\nConverts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.\nConverts a <code>u32</code> to a <code>char</code>, ignoring validity. Use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the unpaired surrogate which caused this error.\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nA generalization of <code>Clone</code> to dynamically-sized types …\nTrait for objects whose <code>Clone</code> impl is lightweight (e.g. …\nReturns a duplicate of the value.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>self</code> to <code>dest</code>.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA helper struct for reverse ordering.\nRestrict a value to a certain interval.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nReturns the maximum of two values with respect to the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nReturns the minimum of two values with respect to the …\nReturns the element that gives the minimum value from the …\nCompares and sorts two values, returning minimum and …\nReturns minimum and maximum values with respect to the …\nReturns minimum and maximum values with respect to the …\nTests for <code>!=</code>. The default implementation is almost always …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReverses the <code>Ordering</code>.\nChains two orderings.\nChains the ordering with the given function.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nAn endpoint of a range of keys.\nError due to the computed capacity exceeding the collection…\nAn exclusive bound.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nAn inclusive bound.\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nAn infinite endpoint. Indicates that there is no bound in …\nA double-ended queue implemented with a growable ring …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> to the end of the list.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nReturns a pair of slices which contain, in order, the …\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nReturns a slice of all values in the underlying vector, in …\nReturns a pair of slices which contain, in order, the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nProvides a mutable reference to the back element, or <code>None</code> …\nA priority queue implemented with a binary heap.\nBinary searches this <code>VecDeque</code> for a given element. If the …\nBinary searches this <code>VecDeque</code> with a comparator function.\nBinary searches this <code>VecDeque</code> with a key extraction …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nReturns the number of elements the map can hold without …\nReturns the number of elements the binary heap can hold …\nReturns the number of elements the set can hold without …\nReturns the number of elements the deque can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nDrops all items from the binary heap.\nClears the set, removing all values.\nClears the map, removing all elements.\nClears the set, removing all elements.\nRemoves all elements from the <code>LinkedList</code>.\nClears the deque, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the set contains an element equal to the …\nReturns <code>true</code> if the <code>LinkedList</code> contains an element equal …\nReturns <code>true</code> if the deque contains an element equal to the …\nReturns <code>true</code> if the map contains a value for the specified …\nReturns <code>true</code> if the map contains a value for the specified …\nProvides a cursor at the back element.\nProvides a cursor with editing operations at the back …\nProvides a cursor at the front element.\nProvides a cursor with editing operations at the front …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nCreates an empty <code>BinaryHeap&lt;T&gt;</code>.\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList&lt;T&gt;</code>.\nCreates an empty deque.\nVisits the values representing the difference, i.e., the …\nVisits the elements representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the binary heap, returning an iterator over the …\nClears the set, returning all elements as an iterator. …\nRemoves the specified range from the deque in bulk, …\nClears the binary heap, returning an iterator over the …\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that visits elements (key-value pairs) …\nCreates an iterator that visits elements in the specified …\nCreates an iterator which uses a closure to determine if …\nReturns the contents of the “front” slice as returned …\nReturns a reference to the first element in the set, if …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.\nTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nReturns the argument unchanged.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nConstructs a <code>BTreeMap&lt;K, V&gt;</code> from an iterator of key-value …\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nProvides a mutable reference to the front element, or <code>None</code> …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nProvides a reference to the element at the given index.\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference to the value corresponding to …\nProvides a mutable reference to the element at the given …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nInserts a value computed from <code>f</code> into the set if the given …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element at <code>index</code> within the deque, shifting all …\nInserts an element at <code>index</code> within the deque, shifting all …\nVisits the values representing the intersection, i.e., the …\nVisits the elements representing the intersection, i.e., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nGets an owning iterator over the entries of the map, …\nGets an iterator for moving out the <code>BTreeSet</code>’s contents …\nConsumes the list into an iterator yielding elements by …\nConsumes the deque into a front-to-back iterator yielding …\nReturns an iterator which retrieves elements in heap order.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the keys, in …\nConsumes the <code>BinaryHeap</code> and returns a vector in sorted …\nCreates a consuming iterator visiting all the values in …\nCreates a consuming iterator visiting all the values, in …\nConsumes the <code>BinaryHeap</code> and returns the underlying vector …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nChecks if the binary heap is empty.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the <code>LinkedList</code> is empty.\nReturns <code>true</code> if the deque is empty.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns an iterator visiting all values in the underlying …\nAn iterator visiting all elements in arbitrary order. The …\nGets an iterator over the entries of the map, sorted by …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nProvides a forward iterator.\nReturns a front-to-back iterator.\nAn iterator visiting all key-value pairs in arbitrary …\nGets a mutable iterator over the entries of the map, …\nProvides a forward iterator with mutable references.\nReturns a front-to-back iterator that returns mutable …\nAn iterator visiting all keys in arbitrary order. The …\nGets an iterator over the keys of the map, in sorted order.\nDetails about the allocation that caused the error\nReturns a reference to the last element in the set, if any.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the number of elements in the map.\nReturns the length of the binary heap.\nReturns the number of elements in the set.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the length of the <code>LinkedList</code>.\nReturns the number of elements in the deque.\nA doubly-linked list with owned nodes.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nRearranges the internal storage of this deque so it is one …\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>BinaryHeap</code> as a max-heap.\nCreates an empty <code>HashSet</code>.\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new, empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList</code>.\nCreates an empty deque.\nCreates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as …\nMakes a new empty BTreeMap with a reasonable choice for B.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nConstructs an empty <code>LinkedList&lt;T, A&gt;</code>.\nCreates an empty deque.\nReturns the index of the partition point according to the …\nReturns the greatest item in the binary heap, or <code>None</code> if …\nReturns a mutable reference to the greatest item in the …\nRemoves the greatest item from the binary heap and returns …\nRemoves the last element from a list and returns it, or …\nRemoves the last element from the deque and returns it, or …\nRemoves and returns the last element from the deque if the …\nRemoves and returns the first element in the map. The key …\nRemoves the first element from the set and returns it, if …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves and returns the first element from the deque if …\nRemoves and returns the last element in the map. The key …\nRemoves the last element from the set and returns it, if …\nPushes an item onto the binary heap.\nAdds an element to the back of the list.\nAppends an element to the back of the deque.\nAdds an element to the back of the list, returning a …\nAppends an element to the back of the deque, returning a …\nAdds an element to the front of the list.\nPrepends an element to the deque.\nAdds an element to the front of the list, returning a …\nPrepends an element to the deque, returning a reference to …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a double-ended iterator over a sub-range of …\nCreates an iterator that covers the specified range in the …\nConstructs a mutable double-ended iterator over a …\nCreates an iterator that covers the specified mutable …\nFill <code>buf</code> with the contents of the “front” slice as …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves the element at the given index and returns it.\nRemoves and returns the element at <code>index</code> from the deque. …\nRemoves a key from the map, returning the stored key and …\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nAdds a value to the set, replacing the existing element, …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> elements more …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> …\nReserves the minimum capacity for at least <code>additional</code> more …\nModifies the deque in-place so that <code>len()</code> is equal to …\nModifies the deque in-place so that <code>len()</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRotates the double-ended queue <code>n</code> places to the left.\nRotates the double-ended queue <code>n</code> places to the right.\nShrinks the capacity of the map with a lower limit. It …\nDiscards capacity with a lower bound.\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the deque with a lower bound.\nShrinks the capacity of the map as much as possible. It …\nDiscards as much additional capacity as possible.\nShrinks the capacity of the set as much as possible. It …\nShrinks the capacity of the deque as much as possible.\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the value. Returns a new …\nSplits the list into two at the given index. Returns …\nSplits the deque into two at the given index.\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nVisits the values representing the symmetric difference, …\nVisits the elements representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nRemoves and returns the element in the set, if any, that …\nShortens the deque, keeping the first <code>len</code> elements and …\nShortens the deque, keeping the last <code>len</code> elements and …\nTries to insert a key-value pair into the map, and returns …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> elements …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nCreates an empty deque with space for at least <code>capacity</code> …\nVisits the values representing the union, i.e., all the …\nVisits the elements representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>Cursor</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nAn iterator visiting all values in arbitrary order. The …\nGets an iterator over the values of the map, in order by …\nAn iterator visiting all values mutably in arbitrary order.\nGets a mutable iterator over the values of the map, in …\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nCreates an empty <code>binary_heap::Iter</code>.\nCreates an empty <code>binary_heap::IntoIter</code>.\nRemoves heap elements in heap order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves the peeked value from the heap and returns it.\nSifts the current element to its new position.\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::ValuesMut</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>btree_map::Range</code>.\nCreates an empty <code>btree_map::RangeMut</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nThe value which was not inserted, because the entry was …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nAn ordered set based on a B-Tree.\nA cursor over a <code>BTreeSet</code>.\nA cursor over a <code>BTreeSet</code> with editing operations.\nA cursor over a <code>BTreeSet</code> with editing operations, and …\nA lazy iterator producing elements in the difference of …\nA view into a single entry in a set, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeSet</code>. It is part of …\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeSet</code>. It is part of …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the VacantEntry’s value.\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nAdvances the cursor to the next gap, returning the element …\nAdvances the cursor to the next gap, returning the  …\nAdvances the cursor to the next gap, returning the element …\nEnsures a value is in the entry by inserting if it was …\nReturns a reference to the next element without moving the …\nReturns a reference to the next element without moving the …\nReturns a reference to next element without moving the …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nTakes the value out of the entry, and returns it.\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nProvides in-place mutable access to an occupied entry …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTake the ownership of the key and value from the map.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nReturns a read-only cursor pointing to the current element.\nProvides a reference to the cursor’s parent list.\nProvides a read-only reference to the cursor’s parent …\nProvides a reference to the back element of the cursor’s …\nProvides a reference to the back element of the cursor’s …\nProvides a mutable reference to back element of the cursor…\nReturns a reference to the element that the cursor is …\nReturns a reference to the element that the cursor is …\nCreates an empty <code>linked_list::Iter</code>.\nCreates an empty <code>linked_list::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a reference to the front element of the cursor’…\nProvides a reference to the front element of the cursor’…\nProvides a mutable reference to the front element of the …\nReturns the cursor position index within the <code>LinkedList</code>.\nReturns the cursor position index within the <code>LinkedList</code>.\nInserts a new element into the <code>LinkedList</code> after the …\nInserts a new element into the <code>LinkedList</code> before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nReturns a reference to the next element.\nReturns a reference to the next element.\nReturns a reference to the previous element.\nReturns a reference to the previous element.\nRemoves the last element from the cursor’s parent list …\nRemoves the first element from the cursor’s parent list …\nAppends an element to the back of the cursor’s parent …\nAppends an element to the front of the cursor’s parent …\nRemoves the current element from the <code>LinkedList</code>.\nRemoves the current element from the <code>LinkedList</code> without …\nInserts the elements from the given <code>LinkedList</code> after the …\nInserts the elements from the given <code>LinkedList</code> before the …\nSplits the list into two after the current element. This …\nSplits the list into two before the current element. This …\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nViews the underlying data as a pair of subslices of the …\nViews the underlying data as a pair of subslices of the …\nViews the underlying data as a pair of subslices of the …\nCreates an empty <code>vec_deque::IterMut</code>.\nCreates an empty <code>vec_deque::Iter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nViews the underlying data as a pair of subslices of the …\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nSupporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …\nUsed to do value-to-value conversions while consuming the …\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nConverts to this type from the input type.\nReturns the argument unchanged.\nThe identity function.\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nPerforms the conversion.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nReturns the “default value” for a type.\nAn iterator over the arguments of a process, yielding a …\nAn iterator over the arguments of a process, yielding an …\nThe error type for operations on the <code>PATH</code> variable. …\nThe specified environment variable was not present in the …\nThe specified environment variable was found, but it did …\nAn iterator that splits an environment variable into paths …\nThe error type for operations interacting with environment …\nAn iterator over a snapshot of the environment variables …\nAn iterator over a snapshot of the environment variables …\nReturns the arguments that this program was started with …\nReturns the arguments that this program was started with …\nConstants associated with the current target\nReturns the current working directory as a <code>PathBuf</code>.\nReturns the full filesystem path of the current running …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the path of the current user’s home directory if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoins a collection of <code>Path</code>s appropriately for the <code>PATH</code> …\nRemoves an environment variable from the environment of …\nChanges the current working directory to the specified …\nSets the environment variable <code>key</code> to the value <code>value</code> for …\nParses input according to platform conventions for the <code>PATH</code>\nReturns the path of a temporary directory.\nFetches the environment variable <code>key</code> from the current …\nFetches the environment variable <code>key</code> from the current …\nReturns an iterator of (variable, value) pairs of strings, …\nReturns an iterator of (variable, value) pairs of OS …\nA string describing the architecture of the CPU that is …\nSpecifies the file extension, if any, used for shared …\nSpecifies the filename prefix, if any, used for shared …\nSpecifies the filename suffix, if any, used for shared …\nSpecifies the file extension, if any, used for executable …\nSpecifies the filename suffix, if any, used for executable …\nA string describing the family of the operating system. An …\nA string describing the specific operating system in use. …\n<code>Error</code> is a trait representing the basic expectations for …\nAn error reporter that prints an error and its sources.\n<code>Request</code> supports generic, type-driven access to data. Its …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nCreates a new <code>Report</code> from an input error.\nEnable pretty-printing the report across multiple lines.\nProvides type-based access to context intended for error …\nProvides a reference. The referee type must be bounded by …\nProvides a reference computed using a closure. The referee …\nProvides a value or other type with only static lifetimes.\nProvides a value or other type with only static lifetimes …\nRequests a reference of type <code>T</code> from the given <code>impl Error</code>.\nRequests a value of type <code>T</code> from the given <code>impl Error</code>.\nDisplay backtrace if available when using pretty output …\nReturns the lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nChecks if the <code>Request</code> would be satisfied if provided with a\nChecks if the <code>Request</code> would be satisfied if provided with a\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.\nInfinity (∞). Use <code>f32::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …\nSmallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f32::NAN</code> instead.\nNegative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f32</code>. …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.\nInfinity (∞). Use <code>f64::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …\nSmallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f64::NAN</code> instead.\nNegative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f64</code>. …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that no nul byte was present.\nAn error indicating that a nul byte was not in the …\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nData provided is not nul terminated.\nAn error indicating that an interior nul byte was found.\nBorrowed reference to an OS string (see <code>OsString</code>).\nA type that can represent owned, mutable platform-native …\nTrait which permits the allowed types to be used with …\nA wrapper for a <code>va_list</code>\nx86_64 ABI implementation of a <code>va_list</code>.\nAdvance to the next arg.\nReturns the contents of this <code>CString</code> as a slice of bytes.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nEquivalent to <code>CString::as_bytes()</code> except that the returned …\nExtracts a <code>CStr</code> slice containing the entire string.\nConverts an OS string slice to a byte slice.  To convert …\nConverts to an <code>OsStr</code> slice.\nReturns the inner pointer to this C string.\nConverts a <code>VaListImpl</code> into a <code>VaList</code> that is …\nIterates over the bytes in this C string.\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>double</code> type.\nEquivalent to C’s <code>float</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>ptrdiff_t</code> type, from <code>stddef.h</code> (or …\nEquivalent to C’s <code>signed char</code> type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> …\nEquivalent to C’s <code>ssize_t</code> (on POSIX) or <code>SSIZE_T</code> (on …\n<code>CStr</code>, <code>CString</code>, and related types.\nEquivalent to C’s <code>unsigned char</code> type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the capacity this <code>OsString</code> can hold without …\nTruncates the <code>OsString</code> to zero length.\nClones the contents of <code>source</code> into <code>self</code>.\nReturns the length of <code>self</code>. Like C’s <code>strlen</code>, this does …\nConstructs an empty <code>OsString</code>.\nCreates an empty <code>OsStr</code>.\nCreates an empty <code>CString</code>.\nReturns an object that implements <code>Display</code> for safely …\nReturns an object that implements <code>Display</code> for safely …\nChecks that two strings are an ASCII case-insensitive …\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into an <code>OsString</code>, by copying the …\nConverts a <code>String</code> into an <code>OsString</code>.\nReturns the argument unchanged.\nCopies any value implementing AsRef&lt;OsStr&gt; into a newly …\nConverts a <code>PathBuf</code> into an <code>OsString</code>\nConverts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or …\nReturns the argument unchanged.\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …\nReturns the argument unchanged.\nConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying …\nConverts a &amp;CStr into a <code>CString</code> by copying the contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a C string wrapper from a byte slice with any …\nCreates a C string wrapper from a byte slice with exactly …\nUnsafely creates a C string wrapper from a byte slice.\nConverts bytes to an <code>OsString</code> without checking that the …\nConverts a slice of bytes to an OS string slice without …\nWraps a raw C string with a safe C string wrapper.\nRetakes ownership of a <code>CString</code> that was transferred to C …\nConverts a string <code>s</code> into a <code>CString</code>.\nCreates a C-compatible string by consuming a byte vector, …\nAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.\nConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>CString</code> into a boxed <code>CStr</code>.\nConverts this <code>OsString</code> into a boxed <code>OsStr</code>.\nConsumes the <code>CString</code> and returns the underlying byte …\nReturns the bytes that were attempted to convert to a …\nEquivalent to <code>CString::into_bytes()</code> except that the …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConsumes this error, returning original <code>CString</code> which …\nConverts the <code>OsString</code> into a byte vector.  To convert the …\nConverts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or …\nConsumes the <code>CString</code> and transfers ownership of the string …\nConverts the <code>OsString</code> into a <code>String</code> if it contains valid …\nConverts the <code>CString</code> into a <code>String</code> if it contains valid …\nConsumes this error, returning the underlying vector of …\nChecks if all characters in this string are within the …\nChecks whether the <code>OsStr</code> is empty.\nReturns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.\nConsumes and leaks the <code>OsString</code>, returning a mutable …\nReturns the length of this <code>OsStr</code>.\nConverts this string to its ASCII lower case equivalent …\nConverts this string to its ASCII upper case equivalent …\nConstructs a new empty <code>OsString</code>.\nCoerces into an <code>OsStr</code> slice.\nCreates a new C-compatible string from a container of …\nReturns the position of the nul byte in the slice that …\nThe <code>OsStr</code> and <code>OsString</code> types and associated utilities.\nExtends the string with the given &amp;OsStr slice.\nReserves capacity for at least <code>additional</code> more capacity to …\nReserves the minimum capacity for at least <code>additional</code> more …\nShrinks the capacity of the <code>OsString</code> with a lower bound.\nShrinks the capacity of the <code>OsString</code> to match its length.\nTakes a substring based on a range that corresponds to the …\nReturns a copy of this string where each character is …\nReturns a copy of this string where each character is …\nConverts this C string to a byte slice.\nConverts this C string to a byte slice containing the …\nCopies the slice into an owned <code>OsString</code>.\nYields a &amp;str slice if the <code>OsStr</code> is valid Unicode.\nYields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.\nConverts an <code>OsStr</code> to a Cow&lt;str&gt;.\nConverts a <code>CStr</code> into a Cow&lt;str&gt;.\nTruncate the <code>OsString</code> to the specified length.\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nAccess the underlying UTF-8 error that was the cause of …\nCreates a new <code>OsString</code> with at least the given capacity.\nCopies the <code>va_list</code> at the current location.\nThe position of the interior nul byte.\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that no nul byte was present.\nAn error indicating that a nul byte was not in the …\nAn error indicating that a nul byte was not in the …\nData provided contains an interior nul byte at byte …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nData provided is not nul terminated.\nAn error indicating that an interior nul byte was found.\nThe position of the interior nul byte.\nHelper struct for safely printing an <code>OsStr</code> with <code>format!</code> …\nBorrowed reference to an OS string (see <code>OsString</code>).\nA type that can represent owned, mutable platform-native …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nSpecifies whether the <code>Debug</code> trait should use …\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nOptions for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\nUse lower-case hexadecimal integers for the <code>Debug</code> trait …\n<code>e</code> formatting.\n<code>x</code> formatting.\nRepresents the <code>-</code> flag.\n<code>o</code> formatting.\nContains the success value\nRepresents the <code>+</code> flag.\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\nThe signedness of a <code>Formatter</code> (or of a <code>FormattingOptions</code>).\nUse upper-case hexadecimal integers for the <code>Debug</code> trait …\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nReturns a flag indicating what form of alignment was …\nSets or removes the alignment.\nDetermines if the <code>#</code> flag was specified.\nSets or unsets the <code>#</code> flag.\nGets the formatted string, if it has no arguments to be …\nCreates a <code>Formatter</code> that writes its output to the given …\nSpecifies whether the <code>Debug</code> trait should use …\nCreates a <code>DebugList</code> builder designed to assist with …\nCreates a <code>DebugMap</code> builder designed to assist with …\nCreates a <code>DebugSet</code> builder designed to assist with …\nCreates a <code>DebugStruct</code> builder designed to assist with …\nCreates a <code>DebugTuple</code> builder designed to assist with …\nSame as <code>FormattingOptions::new()</code>.\nAdds the contents of an iterator of entries to the set …\nAdds the contents of an iterator of entries to the list …\nAdds the contents of an iterator of entries to the map …\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new entry to the map output.\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nReturns the character used as ‘fill’ whenever there is …\nSets the fill character.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nMarks the struct as non-exhaustive, indicating to the …\nMarks the tuple struct as non-exhaustive, indicating to …\nMarks the set as non-exhaustive, indicating to the reader …\nMarks the list as non-exhaustive, indicating to the reader …\nMarks the map as non-exhaustive, indicating to the reader …\nReturns flags for formatting.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nTakes an <code>Arguments</code> struct and returns the resulting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nReturns the current alignment.\nReturns the current <code>#</code> flag.\nReturns the current precision.\nReturns the current fill character.\nReturns the current precision.\nReturns the current sign (the <code>+</code> or the <code>-</code> flag).\nReturns the current <code>0</code> flag.\nReturns the current width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key part of a new entry to the map output.\nAdds the key part of a new entry to the map output.\nCreates a new formatter with given <code>FormattingOptions</code>.\nConstruct a new <code>FormatterBuilder</code> with the supplied <code>Write</code> …\nReturns the formatting options this formatter corresponds …\nTakes a string slice and emits it to the internal buffer …\nPerforms the correct padding for an integer which has …\nReturns the optionally specified precision for numeric …\nSets or removes the precision.\nReturns the sign of this formatter (<code>+</code> or <code>-</code>).\nSets or removes the sign (the <code>+</code> or the <code>-</code> flag).\nDetermines if the <code>0</code> flag was specified.\nSets or unsets the <code>0</code> flag.\nDetermines if the <code>-</code> flag was specified.\nDetermines if the <code>+</code> flag was specified.\nAdds the value part of a new entry to the map output.\nAdds the value part of a new entry to the map output.\nReturns the optionally specified integer width that the …\nSets or removes the width.\nCreates a new formatter based on this one with given …\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nWrites some data to the underlying buffer contained within …\nA builder used to create directories in various manners.\nEntries returned by the <code>ReadDir</code> iterator.\nThe lock could not be acquired due to an I/O error on the …\nAn object providing access to an open file on the …\nRepresentation of the various timestamps on a file.\nA structure representing a type of file with accessors for …\nMetadata information about a file.\nOptions and flags which can be used to configure how a …\nRepresentation of the various permissions on a file.\nIterator over the entries in a directory.\nAn enumeration of possible errors which can occur while …\nThe lock could not be acquired at this time because it is …\nReturns the last access time of this metadata.\nSets the option for the append mode.\nReturns the canonical, absolute form of a path with all …\nCopies the contents of one file to another. This function …\nOpens a file in write-only mode.\nSets the option to create a new file, or open it if it …\nCreates the specified directory with the options …\nOpens a file in write-only mode with buffering.\nCreates a new, empty directory at the provided path\nRecursively create a directory and all of its parent …\nCreates a new file in read-write mode; error if the file …\nSets the option to create a new file, failing if it …\nReturns the creation time listed in this metadata.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nReturns the file name of this directory entry without any …\nReturns the file type for the file that this entry points …\nReturns the file type for this metadata.\nFlushes the file, ensuring that all intermediately …\nReturns a <code>File</code> that takes ownership of the given file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new hard link on the filesystem.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this metadata is for a directory. The …\nTests whether this file type represents a directory. The …\nReturns <code>true</code> if this metadata is for a regular file. The …\nTests whether this file type represents a regular file. …\nDetermines if <code>File</code> has an efficient <code>read_vectored</code> …\nReturns <code>true</code> if this metadata is for a symbolic link.\nTests whether this file type represents a symbolic link. …\nDetermines if <code>File</code> has an efficient <code>write_vectored</code> …\nReturns the size of the file, in bytes, this metadata is …\nAcquire an exclusive lock on the file. Blocks until the …\nAcquire a shared (non-exclusive) lock on the file. Blocks …\nGiven a path, queries the file system to get information …\nQueries metadata about the underlying file.\nReturns the metadata for the file that this entry points …\nReturns the last modification time listed in this metadata.\nCreates a blank new set of options ready for configuration.\nCreates a new <code>FileTimes</code> with no times set.\nCreates a new set of options with default mode/security …\nAttempts to open a file in read-only mode.\nOpens a file at <code>path</code> with the options specified by <code>self</code>.\nAttempts to open a file in read-only mode with buffering.\nReturns a new OpenOptions object.\nReturns the full path to the file that this entry …\nReturns the permissions of the file this metadata is for.\nReads the entire contents of a file into a bytes vector.\nReads some bytes from the file.\nSets the option for read access.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nReads the entire contents of a file into a string.\nLike <code>read</code>, except that it reads into a slice of buffers.\nReturns <code>true</code> if these permissions describe a readonly …\nIndicates that directories should be created recursively, …\nRemoves an empty directory.\nRemoves a directory at this path, after removing all its …\nRemoves a file from the filesystem.\nRenames a file or directory to a new name, replacing the …\nSeek to an offset, in bytes in a file.\nSet the last access time of a file.\nTruncates or extends the underlying file, updating the …\nChanges the modification time of the underlying file.\nSet the last modified time of a file.\nChanges the permissions found on a file or a directory.\nChanges the permissions on the underlying file.\nModifies the readonly flag for this set of permissions. If …\nChanges the timestamps of the underlying file.\nCreates a new symbolic link on the filesystem.\nReturns the length of this file (in bytes).\nQueries the metadata about a file without following …\nAttempts to sync all OS-internal file content and metadata …\nThis function is similar to <code>sync_all</code>, except that it might …\nSets the option for truncating a previous file.\nCreates a new <code>File</code> instance that shares the same …\nTry to acquire an exclusive lock on the file.\nTry to acquire a shared (non-exclusive) lock on the file.\nRelease all locks on the file.\nWrites a slice as the entire contents of a file.\nWrites some bytes to the file.\nSets the option for write access.\nLike <code>write</code>, except that it writes into a slice of buffers.\nAsync version of Drop trait.\nA future represents an asynchronous computation, commonly …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nCreates a future which never resolves, representing a …\nA Future that wraps a function returning <code>Poll</code>.\nA future that is immediately ready with a value.\nAsync drop.\nExecutes the async destructor for this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a future from a value.\nConsumes the <code>Ready</code>, returning the wrapped value.\nPolls multiple futures simultaneously, returning a tuple …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a future that wraps a function returning <code>Poll</code>.\nCreates a future that is immediately ready with a value.\nA trait for creating instances of <code>Hasher</code>.\nUsed to create a default <code>BuildHasher</code> instance for types …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA hashable type.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA trait for hashing an arbitrary stream of bytes.\nType of the hasher that will be created.\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nAn implementation of SipHash 2-4.\nCreates a new hasher.\nConstructs a new <code>RandomState</code>.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nReturns the hash value for the values written so far.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFeeds this value into the given <code>Hasher</code>.\nCalculates the hash of a single value.\nFeeds a slice of this type into the given <code>Hasher</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreates a new <code>DefaultHasher</code>.\nCreates a new BuildHasherDefault for Hasher <code>H</code>.\nCreates a new <code>SipHasher</code> with the two initial keys set to 0.\nCreates a <code>SipHasher</code> that is keyed off the provided keys.\nWrites some data into this <code>Hasher</code>.\nWrites a single <code>i128</code> into this hasher.\nWrites a single <code>i16</code> into this hasher.\nWrites a single <code>i32</code> into this hasher.\nWrites a single <code>i64</code> into this hasher.\nWrites a single <code>i8</code> into this hasher.\nWrites a single <code>isize</code> into this hasher.\nWrites a length prefix into this hasher, as part of being …\nWrites a single <code>str</code> into this hasher.\nWrites a single <code>u128</code> into this hasher.\nWrites a single <code>u16</code> into this hasher.\nWrites a single <code>u32</code> into this hasher.\nWrites a single <code>u64</code> into this hasher.\nWrites a single <code>u8</code> into this hasher.\nWrites a single <code>usize</code> into this hasher.\nMakes a <em>soundness</em> promise to the compiler that <code>cond</code> holds.\nAn identity function that <em><strong>hints</strong></em> to the compiler to be …\nHints to the compiler that given path is cold, i.e., …\nHints to the compiler that a branch condition is likely to …\nAn identity function that causes an <code>unused_must_use</code> …\nReturns either <code>true_val</code> or <code>false_val</code> depending on the …\nEmits a machine instruction to signal the processor that …\nHints to the compiler that a branch condition is unlikely …\nInforms the compiler that the site which is calling this …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nA type for atomic ordering parameters for intrinsics. This …\nAborts the execution of the process.\nPerforms checked integer addition.\nLowers in MIR to <code>Rvalue::Aggregate</code> with …\nThe minimum alignment of a type.\nThe required alignment of the referenced value.\nCalculates the offset from a pointer, potentially wrapping.\nA guard for unsafe functions that cannot ever be executed …\nA guard for <code>std::mem::uninitialized</code>. This will statically …\nA guard for unsafe functions that cannot ever be executed …\nInforms the optimizer that a condition is always true. If …\nBitwise and with the current value, returning the previous …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nAn atomic fence.\nLoads the current value of the pointer. <code>T</code> must be an …\nMaximum with the current value using a signed comparison. <code>T</code>…\nMinimum with the current value using a signed comparison. <code>T</code>…\nBitwise nand with the current value, returning the …\nBitwise or with the current value, returning the previous …\nAn atomic fence for synchronization within a single thread.\nStores the value at the specified memory location. <code>T</code> must …\nMaximum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nAdds to the current value, returning the previous value. <code>T</code> …\nStores the value at the specified memory location, …\nBitwise xor with the current value, returning the previous …\nSubtract from the current value, returning the previous …\nReverses the bits in an integer type <code>T</code>.\nSee documentation of <code>std::hint::black_box</code> for details.\nExecutes a breakpoint trap, for inspection by a debugger.\nReverses the bytes in an integer type <code>T</code>.\nGets a reference to a static <code>Location</code> indicating where it …\nPerforms full-width multiplication and addition with a …\nRust’s “try catch” construct for unwinding. Invokes …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nHints to the compiler that current code path is cold.\nLexicographically compare <code>[left, left + bytes)</code> and …\nAllocates a block of memory at compile time. At runtime, …\nDeallocates a memory which allocated by …\nSelects which function to call depending on the context.\nCheck if the post-condition <code>cond</code> has been met.\nCheck if the pre-condition <code>cond</code> has been met.\nReturns whether we should perform contract-checking at …\nThis is an accidentally-stable alias to <code>ptr::copy</code>; use …\nThis is an accidentally-stable alias to …\nCopies the sign from <code>y</code> to <code>x</code> for <code>f128</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f16</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.\nReturns the cosine of an <code>f128</code>.\nReturns the cosine of an <code>f16</code>.\nReturns the cosine of an <code>f32</code>.\nReturns the cosine of an <code>f64</code>.\nReturns the number of leading unset bits (zeroes) in an …\nLike <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the number of bits set in an integer type <code>T</code>\nReturns the number of trailing unset bits (zeroes) in an …\nLike <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the value of the discriminant for the variant in …\nCombine two values which have no bits in common.\nPerforms an exact division, resulting in undefined …\nReturns 2 raised to the power of an <code>f128</code>.\nReturns 2 raised to the power of an <code>f16</code>.\nReturns 2 raised to the power of an <code>f32</code>.\nReturns 2 raised to the power of an <code>f64</code>.\nReturns the exponential of an <code>f128</code>.\nReturns the exponential of an <code>f16</code>.\nReturns the exponential of an <code>f32</code>.\nReturns the exponential of an <code>f64</code>.\nReturns the absolute value of an <code>f128</code>.\nReturns the absolute value of an <code>f16</code>.\nReturns the absolute value of an <code>f32</code>.\nReturns the absolute value of an <code>f64</code>.\nFloat addition that allows optimizations based on …\nFloat addition that allows optimizations based on …\nFloat division that allows optimizations based on …\nFloat division that allows optimizations based on …\nConverts with LLVM’s fptoui/fptosi, which may return …\nReturns the largest integer less than or equal to an <code>f128</code>.\nReturns the largest integer less than or equal to an <code>f16</code>.\nReturns the largest integer less than or equal to an <code>f32</code>.\nReturns the largest integer less than or equal to an <code>f64</code>.\nReturns <code>a * b + c</code> for <code>f128</code> values.\nReturns <code>a * b + c</code> for <code>f16</code> values.\nReturns <code>a * b + c</code> for <code>f32</code> values.\nReturns <code>a * b + c</code> for <code>f64</code> values.\nFloat multiplication that allows optimizations based on …\nFloat multiplication that allows optimizations based on …\nReturns <code>a * b + c</code> for <code>f128</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f16</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f32</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f64</code> values, non-deterministically …\nMoves a value out of scope without running drop glue.\nFloat remainder that allows optimizations based on …\nFloat remainder that allows optimizations based on …\nReturns the argument unchanged.\nFloat subtraction that allows optimizations based on …\nFloat subtraction that allows optimizations based on …\nCalls <code>U::from(self)</code>.\nReturns whether the argument’s value is statically known …\nHints to the compiler that branch condition is likely to …\nReturns the base 10 logarithm of an <code>f128</code>.\nReturns the base 10 logarithm of an <code>f16</code>.\nReturns the base 10 logarithm of an <code>f32</code>.\nReturns the base 10 logarithm of an <code>f64</code>.\nReturns the base 2 logarithm of an <code>f128</code>.\nReturns the base 2 logarithm of an <code>f16</code>.\nReturns the base 2 logarithm of an <code>f32</code>.\nReturns the base 2 logarithm of an <code>f64</code>.\nReturns the natural logarithm of an <code>f128</code>.\nReturns the natural logarithm of an <code>f16</code>.\nReturns the natural logarithm of an <code>f32</code>.\nReturns the natural logarithm of an <code>f64</code>.\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f128</code> …\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f16</code> …\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f32</code> …\nReturns the maximum (IEEE 754-2019 maximum) of two <code>f64</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f128</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f16</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f32</code> …\nReturns the maximum (IEEE 754-2008 maxNum) of two <code>f64</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f128</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f16</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f32</code> …\nReturns the minimum (IEEE 754-2019 minimum) of two <code>f64</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f128</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f16</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f32</code> …\nReturns the minimum (IEEE 754-2008 minNum) of two <code>f64</code> …\nRustc internal tooling for hand-writing MIR.\nPerforms checked integer multiplication\nReturns <code>true</code> if the actual type given as <code>T</code> requires drop …\nEmits a <code>nontemporal</code> store, which gives a hint to the CPU …\nCalculates the offset from a pointer.\nRaises an <code>f128</code> to an <code>f128</code> power.\nRaises an <code>f16</code> to an <code>f16</code> power.\nRaises an <code>f32</code> to an <code>f32</code> power.\nRaises an <code>f64</code> to an <code>f64</code> power.\nRaises an <code>f128</code> to an integer power.\nRaises an <code>f16</code> to an integer power.\nRaises an <code>f32</code> to an integer power.\nRaises an <code>f64</code> to an integer power.\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nSee documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.\nMasks out bits of the pointer according to a mask.\nLowers in MIR to <code>Rvalue::UnaryOp</code> with <code>UnOp::PtrMetadata</code>.\nSee documentation of <code>&lt;*const T&gt;::offset_from</code> for details.\nSee documentation of <code>&lt;*const T&gt;::offset_from_unsigned</code> for …\nDetermines whether the raw bytes of the two values are …\nThis is an implementation detail of <code>crate::ptr::read</code> and …\nPerforms rotate left.\nPerforms rotate right.\nReturns the nearest integer to an <code>f128</code>. Rounds half-way …\nReturns the nearest integer to an <code>f16</code>. Rounds half-way …\nReturns the nearest integer to an <code>f32</code>. Rounds half-way …\nReturns the nearest integer to an <code>f64</code>. Rounds half-way …\nReturns the nearest integer to an <code>f128</code>. Rounds half-way …\nReturns the nearest integer to an <code>f16</code>. Rounds half-way …\nReturns the nearest integer to an <code>f32</code>. Rounds half-way …\nReturns the nearest integer to an <code>f64</code>. Rounds half-way …\nMagic intrinsic that derives its meaning from attributes …\nComputes <code>a + b</code>, saturating at numeric bounds.\nComputes <code>a - b</code>, saturating at numeric bounds.\nReturns either <code>true_val</code> or <code>false_val</code> depending on …\nSIMD compiler intrinsics.\nReturns the sine of an <code>f128</code>.\nReturns the sine of an <code>f16</code>.\nReturns the sine of an <code>f32</code>.\nReturns the sine of an <code>f64</code>.\nThe size of a type in bytes.\nThe size of the referenced value in bytes.\nProjects to the <code>index</code>-th element of <code>slice_ptr</code>, as the same …\nReturns the square root of an <code>f128</code>\nReturns the square root of an <code>f16</code>\nReturns the square root of an <code>f32</code>\nReturns the square root of an <code>f64</code>\nPerforms checked integer subtraction\nDoes a three-way comparison between the two arguments, …\nReinterprets the bits of a value of one type as another …\nLike <code>transmute</code>, but even less checked at compile-time: …\nReturns the integer part of an <code>f128</code>.\nReturns the integer part of an <code>f16</code>.\nReturns the integer part of an <code>f32</code>.\nReturns the integer part of an <code>f64</code>.\nGets an identifier which is globally unique to the …\nTests (at compile-time) if two <code>crate::any::TypeId</code> …\nGets a static string slice containing the name of a type.\nNon-overlapping <em>typed</em> swap of a single value.\nReturns whether we should perform some UB-checking at …\nPerforms a volatile load from the <code>src</code> pointer The pointer …\nPerforms a volatile store to the <code>dst</code> pointer. The pointer …\nReturns the result of an unchecked addition, resulting in …\nPerforms an unchecked division, resulting in undefined …\nReturns the result of an unchecked multiplication, …\nReturns the remainder of an unchecked division, resulting …\nPerforms an unchecked left shift, resulting in undefined …\nPerforms an unchecked right shift, resulting in undefined …\nReturns the result of an unchecked subtraction, resulting …\nHints to the compiler that branch condition is likely to …\nInforms the optimizer that this point in the code is not …\nLoads an argument of type <code>T</code> from the <code>va_list</code> <code>ap</code> and …\nCopies the current location of arglist <code>src</code> to the arglist …\nDestroy the arglist <code>ap</code> after initialization with <code>va_start</code> …\nReturns the number of variants of the type <code>T</code> cast to a …\nEquivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …\nEquivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …\nPerforms a volatile load from the <code>src</code> pointer.\nEquivalent to the appropriate <code>llvm.memset.p0i8.*</code> …\nPerforms a volatile store to the <code>dst</code> pointer.\nThe intrinsic will return the alignment stored in that …\nThe intrinsic will return the size stored in that vtable.")
searchState.loadedDescShard("cs431_homework", 5, "Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …\nReturns <code>None</code>.\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value.\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls …\nConverts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.\nMoves <code>val</code> into a new <code>Some</code>.\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nReturns the argument unchanged.\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code>: if it is <code>None</code>, no …\nInserts <code>value</code> into the option if it is <code>None</code>, then returns …\nInserts the default value into the option if it is <code>None</code>, …\nInserts a value computed from <code>f</code> into the option if it is …\nInserts <code>value</code> into the option, then returns a mutable …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a consuming iterator over the possibly contained …\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> or the value inside …\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> and the value inside …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nMaps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …\nReturns the provided default result (if none), or applies …\nMaps an <code>Option&lt;T&gt;</code> to a <code>U</code> by applying function <code>f</code> to the …\nComputes a default function result (if none), or applies a …\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nReturns the option if it contains a value, otherwise …\nReturns the option if it contains a value, otherwise calls …\nTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …\nReplaces the actual value in the option by the value given …\nTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …\nTakes the value out of the option, leaving a <code>None</code> in its …\nTakes the value out of the option, but only if the …\nTransposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>…\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Some</code> value or a provided default.\nReturns the contained <code>Some</code> value or a default.\nReturns the contained <code>Some</code> value or computes it from a …\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value,\nUnzips an option containing a tuple of two options.\nReturns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, …\nZips <code>self</code> with another <code>Option</code>.\nZips <code>self</code> and another <code>Option</code> with function <code>f</code>.\nOwned and borrowed Unix-like file descriptors.\nLinux-specific definitions.\nCompatibility module for C platform-specific types. Use …\nPlatform-specific extensions to <code>std</code> for Unix platforms.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nReturns a <code>BorrowedFd</code> holding the given raw file descriptor.\nTakes ownership of a <code>ChildStdin</code>’s file descriptor.\nReturns the argument unchanged.\nTakes ownership of a <code>ChildStdout</code>’s file descriptor.\nTakes ownership of a <code>ChildStderr</code>’s file descriptor.\nTakes ownership of a <code>UnixListener</code>’s socket file …\nTakes ownership of a <code>File</code>’s underlying file descriptor.\nTakes ownership of a <code>UnixStream</code>’s socket file descriptor.\nTakes ownership of a <code>UnixDatagram</code>’s socket file …\nTakes ownership of a <code>UdpSocket</code>’s file descriptor.\nTakes ownership of a <code>TcpListener</code>’s socket file …\nTakes ownership of a <code>TcpStream</code>’s socket file descriptor.\nReturns the argument unchanged.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConstructs a new instance of <code>Self</code> from the given raw file …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this object, returning the raw underlying file …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nLinux-specific extensions to primitives in the <code>std::fs</code> …\nLinux-specific networking functionality.\nLinux-specific extensions to primitives in the <code>std::process</code>…\nLinux-specific raw type definitions.\nOS-specific extensions to <code>fs::Metadata</code>.\nGain a reference to the underlying <code>stat</code> structure which …\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nReturns the “preferred” block size for efficient …\nReturns the number of blocks allocated to the file, …\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nReturns the device ID on which this file resides.\nReturns the group ID of the file owner.\nReturns the inode number.\nReturns the file type and mode.\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nReturns the number of hard links to file.\nReturns the device ID that this file represents. Only …\nReturns the size of the file (if it is a regular file or a …\nReturns the user ID of the file owner.\nPlatform-specific extensions to <code>SocketAddr</code>.\nOs-specific extensions for <code>TcpStream</code>\nLinux-specific functionality for <code>AF_UNIX</code> sockets …\nReturns the contents of this address if it is in the …\nGets the accept delay value (in seconds) of the …\nCreates a Unix socket address in the abstract namespace.\nQuery the current setting of socket option <code>SO_PASSCRED</code>.\nGets the value of the <code>TCP_QUICKACK</code> option on this socket.\nA socket listener will be awakened solely when data …\nEnable or disable socket option <code>SO_PASSCRED</code>.\nEnable or disable <code>TCP_QUICKACK</code>.\nOs-specific extensions for <code>Child</code>\nOs-specific extensions for <code>Command</code>\nThis type represents a file descriptor that refers to a …\nSets whether a <code>PidFd</code> should be created for the <code>Child</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>PidFd</code> created for this <code>Child</code>, if available. …\nForces the child process to exit.\nObtains a reference to the <code>PidFd</code> created for this <code>Child</code>, …\nAttempts to collect the exit status of the child if it has …\nWaits for the child to exit completely, returning the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>double</code> type.\nEquivalent to C’s <code>float</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>signed char</code> type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>unsigned char</code> type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nUnix-specific extensions to primitives in the <code>std::ffi</code> …\nUnix-specific extensions to primitives in the <code>std::fs</code> …\nUnix-specific extensions to general I/O primitives.\nUnix-specific networking functionality.\nA prelude for conveniently writing platform-specific code.\nUnix-specific extensions to primitives in the <code>std::process</code> …\nUnix-specific primitives available on all unix platforms.\nUnix-specific extensions to primitives in the <code>std::thread</code> …\nPlatform-specific extensions to <code>OsStr</code>.\nPlatform-specific extensions to <code>OsString</code>.\nGets the underlying byte view of the <code>OsStr</code> slice.\nCreates an <code>OsStr</code> from a byte slice.\nCreates an <code>OsString</code> from a byte vector.\nYields the underlying byte vector of this <code>OsString</code>.\nUnix-specific extensions to <code>fs::DirBuilder</code>.\nUnix-specific extension methods for <code>fs::DirEntry</code>.\nSealed Unix-specific extension methods for <code>fs::DirEntry</code>.\nUnix-specific extensions to <code>fs::File</code>.\nUnix-specific extensions for <code>fs::FileType</code>.\nUnix-specific extensions to <code>fs::Metadata</code>.\nUnix-specific extensions to <code>fs::OpenOptions</code>.\nUnix-specific extensions to <code>fs::Permissions</code>.\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nReturns the block size for filesystem I/O.\nReturns the number of blocks allocated to the file, in …\nChange the owner and group of the specified path.\nChange the root directory of the current process to the …\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nPass custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the ID of the device containing the file.\nChange the owner and group of the file referenced by the …\nReturns a reference to the underlying <code>OsStr</code> of this entry…\nCreates a new instance from the given mode permission bits.\nReturns the group ID of the owner of this file.\nReturns the inode number.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nReturns <code>true</code> if this file type is a block device.\nReturns <code>true</code> if this file type is a char device.\nReturns <code>true</code> if this file type is a fifo.\nReturns <code>true</code> if this file type is a socket.\nChange the owner and group of the specified path, without …\nCreate a FIFO special file at the specified path with the …\nReturns the mode permission bits\nSets the mode bits that a new file will be created with.\nReturns the rights applied to this file.\nSets the mode to create new directories with. This option …\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nReturns the number of hard links pointing to this file.\nReturns the device ID of this file (if it is a special …\nReads a number of bytes starting from a given offset.\nReads the exact number of bytes required to fill <code>buf</code> from …\nReads the exact number of bytes required to fill <code>buf</code> from …\nLike <code>read_at</code>, except that it reads into a slice of buffers.\nLike <code>read_at</code>, except that it reads into a slice of buffers.\nSets the mode permission bits.\nReturns the total size of this file in bytes.\nCreates a new symbolic link on the filesystem.\nReturns the user ID of the owner of this file.\nAttempts to write an entire buffer starting from a given …\nAttempts to write an entire buffer starting from a given …\nWrites a number of bytes starting from a given offset.\nLike <code>write_at</code>, except that it writes from a slice of …\nLike <code>write_at</code>, except that it writes from a slice of …\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConsumes this object, returning the raw underlying file …\nThis enum represent one control message of variable type.\nThe error type which is returned from parsing the type a …\nAn iterator over incoming connections to a <code>UnixListener</code>.\nThis struct is used to iterate through the control …\nThis control message contains unix credentials.\nThis control message contains file descriptors.\nAn address associated with a Unix socket.\nA Unix socket Ancillary data struct.\nUnix credential.\nCredentials for a UNIX process for credentials passing.\nA Unix datagram socket.\nA structure representing a Unix domain socket server.\nA Unix stream socket.\nAccepts a new incoming connection to this listener.\nAdd credentials to the ancillary data.\nAdd file descriptors to the ancillary data.\nReturns the contents of this address if it is a <code>pathname</code> …\nCreates a Unix datagram socket bound to the given path.\nCreates a new <code>UnixListener</code> bound to the specified socket.\nCreates a Unix datagram socket bound to an address.\nCreates a new <code>UnixListener</code> bound to the specified …\nReturns the capacity of the buffer.\nClears the ancillary data, removing all values.\nConnects the socket to the specified path address.\nConnects to the socket named by <code>path</code>.\nConnects the socket to an address.\nConnects to the socket specified by <code>address</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>SockAddr</code> with the family <code>AF_UNIX</code> and the …\nGets the current GID.\nGets the current PID.\nGets the current UID.\nThe GID part of the peer credential. This is the effective …\nReturns an iterator over incoming connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ancillary data is empty.\nReturns <code>true</code> if the address is unnamed.\nReturns the number of used bytes.\nReturns the address of this socket.\nReturns the local socket address of this listener.\nReturns the socket address of the local half of this …\nReturns the iterator of the control messages.\nCreates a Unix credential struct.\nCreates an ancillary data with the given buffer.\nCreates an unnamed pair of connected sockets.\nCreates an unnamed pair of connected sockets.\nReceives data on the socket from the remote address to …\nReceives data on the socket from the remote address to …\nReceives a single datagram message on the socket, without …\nReturns the address of this socket’s peer.\nReturns the socket address of the remote half of this …\nGets the peer credentials for this Unix domain socket.\nThe PID part of the peer credential. This field is …\nReturns the read timeout of this socket.\nReturns the read timeout of this socket.\nReceives data from the socket.\nReceives data from the socket.\nReceives data and ancillary data from socket.\nReceives data and ancillary data from socket.\nReceives data and ancillary data from socket.\nSends data on the socket to the socket’s peer.\nSends data on the socket to the specified address.\nSends data on the socket to the specified SocketAddr.\nSends data and ancillary data on the socket.\nSends data and ancillary data on the socket.\nSends data and ancillary data on the socket to the …\nSet the GID.\nSet the id of the socket for network filtering purpose\nSet the id of the socket for network filtering purpose\nMoves the socket into or out of nonblocking mode.\nMoves the socket into or out of nonblocking mode.\nMoves the socket into or out of nonblocking mode.\nSet the PID.\nSets the read timeout for the socket.\nSets the read timeout for the socket.\nSet the UID.\nSets the write timeout for the socket.\nSets the write timeout for the socket.\nShut down the read, write, or both halves of this …\nShuts down the read, write, or both halves of this …\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nIs <code>true</code> if during a recv operation the ancillary was …\nCreates a new independently owned handle to the underlying …\nCreates a new independently owned handle to the underlying …\nCreates a new independently owned handle to the underlying …\nThe UID part of the peer credential. This is the effective …\nCreates a Unix Datagram socket which is not bound to any …\nReturns the write timeout of this socket.\nReturns the write timeout of this socket.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nUnix-specific extensions to the <code>process::Command</code> builder.\nUnix-specific extension methods for <code>fs::DirEntry</code>.\nUnix-specific extensions to <code>process::ExitStatus</code> and …\nUnix-specific extensions to <code>fs::File</code>.\nUnix-specific extensions for <code>fs::FileType</code>.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nUnix-specific extensions to <code>JoinHandle</code>.\nUnix-specific extensions to <code>fs::Metadata</code>.\nUnix-specific extensions to <code>fs::OpenOptions</code>.\nPlatform-specific extensions to <code>OsStr</code>.\nPlatform-specific extensions to <code>OsString</code>.\nAn owned file descriptor.\nUnix-specific extensions to <code>fs::Permissions</code>.\nRaw file descriptors.\nSet executable argument\nGets the underlying byte view of the <code>OsStr</code> slice.\nBorrows the file descriptor.\nExtracts the raw pthread_t without taking ownership\nExtracts the raw file descriptor.\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nReturns the block size for filesystem I/O.\nReturns the number of blocks allocated to the file, in …\nSet the root of the child process. This calls <code>chroot</code> in …\nWhether the process was continued from a stopped status.\nIf the process was terminated by a signal, says whether it …\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nPass custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the ID of the device containing the file.\nPerforms all the required setup by this <code>Command</code>, followed …\nCreates an <code>OsStr</code> from a byte slice.\nCreates a new instance from the given mode permission bits.\nCreates a new <code>ExitStatus</code> or <code>ExitStatusError</code> from the raw …\nConstructs a new instance of <code>Self</code> from the given raw file …\nCreates an <code>OsString</code> from a byte vector.\nReturns the group ID of the owner of this file.\nSimilar to <code>uid</code>, but sets the group ID of the child …\nSets the supplementary group IDs for the calling process. …\nReturns the inode number.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nConsumes the thread, returning the raw pthread_t\nReturns the underlying raw <code>wait</code> status.\nConsumes this object, returning the raw underlying file …\nYields the underlying byte vector of this <code>OsString</code>.\nReturns <code>true</code> if this file type is a block device.\nReturns <code>true</code> if this file type is a char device.\nReturns <code>true</code> if this file type is a fifo.\nReturns <code>true</code> if this file type is a socket.\nReturns the mode permission bits\nSets the mode bits that a new file will be created with.\nReturns the rights applied to this file.\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nReturns the number of hard links pointing to this file.\nSchedules a closure to be run just before the <code>exec</code> …\nSets the process group ID (PGID) of the child process. …\nReturns the device ID of this file (if it is a special …\nReads a number of bytes starting from a given offset.\nSends a signal to a child process.\nSets the mode permission bits.\nIf the process was terminated by a signal, returns that …\nReturns the total size of this file in bytes.\nIf the process was stopped by a signal, returns that …\nReturns the user ID of the owner of this file.\nSets the child process’s user ID. This translates to a …\nWrites a number of bytes starting from a given offset.\nUnix-specific extensions to the <code>process::Command</code> builder.\nUnix-specific extensions to <code>process::ExitStatus</code> and …\nSet executable argument\nSchedules a closure to be run just before the <code>exec</code> …\nSchedules a closure to be run just before the <code>exec</code> …\nSet the root of the child process. This calls <code>chroot</code> in …\nWhether the process was continued from a stopped status.\nIf the process was terminated by a signal, says whether it …\nPerforms all the required setup by this <code>Command</code>, followed …\nCreates a new <code>ExitStatus</code> or <code>ExitStatusError</code> from the raw …\nSimilar to <code>uid</code>, but sets the group ID of the child …\nSets the supplementary group IDs for the calling process. …\nReturns the underlying raw <code>wait</code> status.\nReturns the OS-assigned process identifier associated with …\nSchedules a closure to be run just before the <code>exec</code> …\nSets the process group ID (PGID) of the child process. …\nSends a signal to a child process.\nIf the process was terminated by a signal, returns that …\nIf the process was stopped by a signal, returns that …\nSets the child process’s user ID. This translates to a …\nUnix-specific extensions to <code>JoinHandle</code>.\nExtracts the raw pthread_t without taking ownership\nConsumes the thread, returning the raw pthread_t\nA simple wrapper around a type to assert that it is unwind …\nThe configuration for whether and how the default panic …\nPrints a backtrace with all possible information.\nA struct containing information about the location of a …\nDisable collecting and displaying backtraces.\nA struct providing information about a panic.\nA struct providing information about a panic.\nA marker trait representing types where a shared reference …\nPrints a terser backtrace which ideally only contains …\nA marker trait which represents “panic safe” types in …\nInvokes a closure, aborting if the closure unwinds.\nMakes all future panics abort directly without running the …\nReturns the source location of the caller of this …\nReturns whether the panic handler is allowed to unwind the …\nInvokes a closure, capturing the cause of an unwinding …\nReturns the column from which the panic originated.\nReturns the name of the source file from which the panic …\nReturns the name of the source file as a nul-terminated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether the standard library’s panic hook will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the line number from which the panic originated.\nReturns information about the location from which the …\nPanics the current thread with the given message as the …\nReturns the payload associated with the panic.\nReturns the payload associated with the panic, if it is a …\nTriggers a panic without invoking the panic hook.\nConfigures whether the default panic hook will capture and …\nRegisters a custom panic hook, replacing the previously …\nUnregisters the current panic hook and returns it, …\nAtomic combination of <code>take_hook</code> and <code>set_hook</code>. Use this to …\nCreates a pattern type.\nAn iterator over <code>Path</code> and its ancestors.\nA single component of a path.\nAn iterator over the <code>Component</code>s of a <code>Path</code>.\nA reference to the current directory, i.e., <code>.</code>.\nDevice namespace prefix, e.g., <code>\\\\.\\COM42</code>.\nPrefix <code>C:</code> for the given disk drive.\nHelper struct for safely printing paths with <code>format!</code> and <code>{}</code>…\nAn iterator over the <code>Component</code>s of a <code>Path</code>, as <code>OsStr</code> slices.\nThe primary separator of path components for the current …\nThe primary separator of path components for the current …\nA normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.\nAn error returned from <code>Path::normalize_lexically</code> if a <code>..</code> …\nA reference to the parent directory, i.e., <code>..</code>.\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nWindows path prefixes, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA Windows path prefix, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA structure wrapping a Windows path prefix as well as its …\nThe root directory component, appears after any prefix and …\nAn error returned from <code>Path::strip_prefix</code> if the prefix …\nPrefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. …\nVerbatim prefix, e.g., <code>\\\\?\\cat_pics</code>.\nVerbatim disk prefix, e.g., <code>\\\\?\\C:</code>.\nVerbatim prefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>,\nMakes the path absolute without accessing the filesystem.\nAppend <code>self.extension</code> with <code>extension</code>.\nProduces an iterator over <code>Path</code> and its ancestors.\nYields a mutable reference to the underlying <code>OsStr</code> slice.\nYields a mutable reference to the underlying <code>OsString</code> …\nYields the underlying <code>OsStr</code> slice.\nReturns the raw <code>OsStr</code> slice for this prefix.\nExtracts the underlying <code>OsStr</code> slice.\nCoerces to a <code>Path</code> slice.\nExtracts a slice corresponding to the portion of the path …\nExtracts a slice corresponding to the portion of the path …\nReturns the canonical, absolute form of the path with all …\nInvokes <code>capacity</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>clear</code> on the underlying instance of <code>OsString</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nProduces an iterator over the <code>Component</code>s of the path.\nReturns an object that implements <code>Display</code> for safely …\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nReturns <code>true</code> if the path points at an existing entity.\nExtends <code>self</code> with <code>Path</code> elements from <code>iter</code>.\nExtracts the extension (without the leading dot) of …\nReturns the final component of the <code>Path</code>, if there is one.\nExtracts the prefix of <code>self.file_name</code>.\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nConverts a <code>String</code> into a <code>PathBuf</code>\nConverts a Box&lt;Path&gt; into a <code>PathBuf</code>.\nConverts a clone-on-write pointer to an owned path.\nReturns the argument unchanged.\nConverts an <code>OsString</code> into a <code>PathBuf</code>.\nConverts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PathBuf</code> from the <code>Path</code> elements of an …\nReturns <code>true</code> if the <code>Path</code> has a root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PathBuf</code> into a boxed <code>Path</code>.\nConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> …\nConverts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …\nReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.\nDetermines whether the character is one of the permitted …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nDetermines if the prefix is verbatim, i.e., begins with …\nProduces an iterator over the path’s components viewed …\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nReturns the parsed prefix data.\nConsumes and leaks the <code>PathBuf</code>, returning a mutable …\nQueries the file system to get information about a file, …\nAllocates an empty <code>PathBuf</code>.\nDirectly wraps a string slice as a <code>Path</code> slice.\nNormalize a path, including <code>..</code> without traversing the …\nReturns the <code>Path</code> without its final component, if there is …\nTruncates <code>self</code> to <code>self.parent</code>.\nExtends <code>self</code> with <code>path</code>.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nInvokes <code>reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>reserve_exact</code> on the underlying instance of …\nUpdates <code>self.extension</code> to <code>Some(extension)</code> or to <code>None</code> if …\nUpdates <code>self.file_name</code> to <code>file_name</code>.\nInvokes <code>shrink_to</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>shrink_to_fit</code> on the underlying instance of …\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.\nQueries the metadata about a file without following …\nConverts a <code>Path</code> to an owned <code>PathBuf</code>.\nYields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.\nConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nInvokes <code>try_reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>try_reserve_exact</code> on the underlying instance of …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the extension …\nCreates a new <code>PathBuf</code> with a given capacity used to create …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file …\nA pointer which pins its pointee in place.\nTrait that indicates that this is a pointer or a wrapper …\nThis type provides a way to entirely opt-out of typical …\nGets <code>Pin&lt;&amp;mut T&gt;</code> to the underlying pinned value from this …\nGets a mutable reference to the pinned value this <code>Pin&lt;Ptr&gt;</code> …\nGets a shared reference to the pinned value this <code>Pin</code> …\nCreates an <code>UnsafePinned</code>, with the <code>Default</code> value for T.\nCreates a new <code>UnsafePinned&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nGet mutable access to the contents of a shared <code>UnsafePinned</code>…\nGets a mutable reference to the data inside of this <code>Pin</code>.\nGet read-write access to the contents of a pinned …\nGet read-write access to the contents of an <code>UnsafePinned</code>.\nGets a shared reference out of a pin.\nGets a mutable reference to the data inside of this <code>Pin</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the value, consuming this <code>UnsafePinned</code>.\nUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying pointer.\nUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying <code>Ptr</code>.\nConverts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same …\nConstructs a new pin by mapping the interior value.\nConstructs a new pin by mapping the interior value.\nConstructs a new instance of <code>UnsafePinned</code> which will wrap …\nConstructs a new <code>Pin&lt;Ptr&gt;</code> around a pointer to some data of …\nConstructs a new <code>Pin&lt;Ptr&gt;</code> around a reference to some data …\nConstructs a Pin&lt;&amp;mut T&gt;, by pinning a <code>value: T</code> locally.\nGets an immutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nAssigns a new value to the memory location pointed to by …\nGets a pinning mutable reference from a static mutable …\nGets a pinning reference from a <code>&amp;&#39;static</code> reference.\nThe 2015 version of the prelude of The Rust Standard …\nThe 2018 version of the prelude of The Rust Standard …\nThe 2021 version of the prelude of The Rust Standard …\nThe 2024 version of the prelude of The Rust Standard …\nThe first version of the prelude of The Rust Standard …\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nA pointer type that uniquely owns a heap allocation of …\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nTypes that do not require any pinning guarantees.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nEnables or disables tracing functionality used for …\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nA pointer type that uniquely owns a heap allocation of …\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nTypes that do not require any pinning guarantees.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nEnables or disables tracing functionality used for …\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nA pointer type that uniquely owns a heap allocation of …\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nConversion from an <code>Iterator</code>.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nTypes that do not require any pinning guarantees.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nCreates a value from an iterator.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nEnables or disables tracing functionality used for …\nPerforms the conversion.\nPerforms the conversion.\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nA pointer type that uniquely owns a heap allocation of …\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nConversion from an <code>Iterator</code>.\nA future represents an asynchronous computation, commonly …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nTypes that do not require any pinning guarantees.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nAttribute macro applied to a function to register it as a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nReturns a duplicate of the value.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nExtends a collection with the contents of an iterator.\nExpands to the file name in which it was invoked.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nCreates a value from an iterator.\nAttribute macro applied to a static to register it as a …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nConverts this type into the (usually inferred) input type.\nCreates a future from a value.\nCreates an iterator from a value.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nExpands to a string that represents the current module …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nAttempts to resolve the future to a final value, …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nStringifies its arguments.\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nEnables or disables tracing functionality used for …\nPerforms the conversion.\nPerforms the conversion.\nUnstable placeholder for type ascription.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nA pointer type that uniquely owns a heap allocation of …\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nA common trait that allows explicit creation of a …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nOutput type of the called closure’s future.\nThe returned type after the call operator is used.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nTypes that do not require any pinning guarantees.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nAttribute macro applied to a function to register it as a …\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns an iterator over <code>N</code> elements of the iterator at a …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nAsserts that a boolean expression is <code>true</code> at runtime.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nAttribute macro applied to a function to turn it into a …\nCreates a “by reference” adapter for this instance of …\nCreates a “by reference” adapter for this instance of …\nCreates a “by reference” adapter for this instance of …\nCreates a “by reference” adapter for this instance of …\nCreates a “by reference” adapter for this instance of …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nTakes two iterators and creates a new iterator over both …\nTakes two iterators and creates a new iterator over both …\nTakes two iterators and creates a new iterator over both …\nTakes two iterators and creates a new iterator over both …\nTakes two iterators and creates a new iterator over both …\nRestrict a value to a certain interval.\nRestrict a value to a certain interval.\nRestrict a value to a certain interval.\nRestrict a value to a certain interval.\nRestrict a value to a certain interval.\nReturns a duplicate of the value.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>source</code>.\nUses borrowed data to replace owned data, usually by …\nUses borrowed data to replace owned data, usually by …\nUses borrowed data to replace owned data, usually by …\nUses borrowed data to replace owned data, usually by …\nUses borrowed data to replace owned data, usually by …\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nCreates an iterator which <code>clone</code>s all of its elements.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCollects all the items from an iterator into a collection.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nConsumes the iterator, counting the number of iterations …\nConsumes the iterator, counting the number of iterations …\nConsumes the iterator, counting the number of iterations …\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nRepeats an iterator endlessly.\nReturns the “default value” for a type.\nProvide a list of type aliases and other …\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nDisposes of a value.\nExecutes the destructor for this type.\nCreates an iterator which gives the current iteration …\nCreates an iterator which gives the current iteration …\nCreates an iterator which gives the current iteration …\nCreates an iterator which gives the current iteration …\nCreates an iterator which gives the current iteration …\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nReserves capacity in a collection for the given number of …\nReserves capacity in a collection for the given number of …\nReserves capacity in a collection for the given number of …\nReserves capacity in a collection for the given number of …\nExpands to the file name in which it was invoked.\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nSearches for an element of an iterator that satisfies a …\nSearches for an element of an iterator that satisfies a …\nSearches for an element of an iterator that satisfies a …\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nFolds every element into an accumulator by applying an …\nFolds every element into an accumulator by applying an …\nFolds every element into an accumulator by applying an …\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nCalls a closure on each element of an iterator.\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nCreates an iterator which ends after the first <code>None</code>.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nAttribute macro applied to a static to register it as a …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nDoes something with each element of an iterator, passing …\nDoes something with each element of an iterator, passing …\nDoes something with each element of an iterator, passing …\nDoes something with each element of an iterator, passing …\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nCreates a new iterator which places an item generated by …\nCreates a new iterator which places an item generated by …\nCreates a new iterator which places an item generated by …\nCreates a new iterator which places an item generated by …\nConverts this type into the (usually inferred) input type.\nCreates an iterator from a value.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nConsumes the iterator, returning the last element.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nReturns the exact remaining length of the iterator.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nTakes a closure and creates an iterator which calls that …\nTakes a closure and creates an iterator which calls that …\nTakes a closure and creates an iterator which calls that …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCreates an iterator that both yields elements based on a …\nCreates an iterator that both yields elements based on a …\nCreates an iterator that both yields elements based on a …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nCalls the given function <code>f</code> for each contiguous window of …\nCalls the given function <code>f</code> for each contiguous window of …\nCalls the given function <code>f</code> for each contiguous window of …\nCalls the given function <code>f</code> for each contiguous window of …\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nReturns the element that gives the maximum value from the …\nReturns the element that gives the maximum value from the …\nReturns the element that gives the maximum value from the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nReturns the element that gives the minimum value from the …\nReturns the element that gives the minimum value from the …\nReturns the element that gives the minimum value from the …\nReturns the element that gives the minimum value from the …\nExpands to a string that represents the current module …\nTests for <code>!=</code>. The default implementation is almost always …\nTests for <code>!=</code>. The default implementation is almost always …\nTests for <code>!=</code>. The default implementation is almost always …\nTests for <code>!=</code>. The default implementation is almost always …\nTests for <code>!=</code>. The default implementation is almost always …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nAdvances the iterator and returns an array containing the …\nAdvances the iterator and returns an array containing the …\nAdvances the iterator and returns an array containing the …\nAdvances the iterator and returns an array containing the …\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nOptionally inspects an environment variable at compile …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nReorders the elements of this iterator <em>in-place</em> according …\nReorders the elements of this iterator <em>in-place</em> according …\nReorders the elements of this iterator <em>in-place</em> according …\nReorders the elements of this iterator <em>in-place</em> according …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nSearches for an element in an iterator, returning its …\nSearches for an element in an iterator, returning its …\nSearches for an element in an iterator, returning its …\nSearches for an element in an iterator, returning its …\nSearches for an element in an iterator, returning its …\nIterates over the entire iterator, multiplying all the …\nIterates over the entire iterator, multiplying all the …\nIterates over the entire iterator, multiplying all the …\nIterates over the entire iterator, multiplying all the …\nIterates over the entire iterator, multiplying all the …\nReduces the elements to a single one, by repeatedly …\nReduces the elements to a single one, by repeatedly …\nReduces the elements to a single one, by repeatedly …\nReduces the elements to a single one, by repeatedly …\nReduces the elements to a single one, by repeatedly …\nReverses an iterator’s direction.\nReverses an iterator’s direction.\nReverses an iterator’s direction.\nReverses an iterator’s direction.\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nStringifies its arguments.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nEnables or disables tracing functionality used for …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nUnstable placeholder for type ascription.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\nRepresentation of a running or exited child process.\nA handle to a child process’s stderr.\nA handle to a child process’s standard input (stdin).\nA handle to a child process’s standard output (stdout).\nA process builder, providing fine-grained control over how …\nAn iterator over the command arguments.\nAn iterator over the command environment variables.\nThis type represents the status code the current process …\nDescribes the result of a process after it has terminated.\nDescribes the result of a process after it has failed\nThe canonical <code>ExitCode</code> for unsuccessful termination on …\nThe output of a finished process.\nThe canonical <code>ExitCode</code> for successful termination on this …\nDescribes what to do with a standard I/O stream for a …\nA trait for implementing arbitrary return types in the <code>main</code>…\nTerminates the process in an abnormal fashion.\nAdds an argument to pass to the program.\nAdds multiple arguments to pass to the program.\nReturns the exit code of the process, if any.\nReports the exit code, if applicable, from an …\nReports the exit code, if applicable, from an …\nSets the working directory for the child process.\nInserts or updates an explicit environment variable …\nClears all explicitly set environment variables and …\nRemoves an explicitly set environment variable and …\nInserts or updates multiple explicit environment variable …\nTerminates the current process with the specified exit …\nReturns an error if a nonzero exit status was received.\nWas termination successful?  Returns a <code>Result</code>.\nExit the current process with the given <code>ExitCode</code>.\nFormat the program and arguments of a Command for display. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRedirect command stdout/stderr to our stderr\nConverts a <code>ChildStdin</code> into a <code>Stdio</code>.\nRedirect command stdout/stderr to our stdout\nReturns the argument unchanged.\nTakes ownership of a file descriptor and returns a <code>Stdio</code> …\nConverts a <code>File</code> into a <code>Stdio</code>.\nConverts a <code>ChildStderr</code> into a <code>Stdio</code>.\nConverts a <code>ChildStdout</code> into a <code>Stdio</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an <code>ExitCode</code> from an arbitrary u8 value.\nReturns the argument unchanged.\nReturns an iterator of the arguments that will be passed …\nReturns the working directory for the child process.\nReturns an iterator of the environment variables …\nReturns the path to the program that was given to …\nReturns the OS-assigned process identifier associated with …\nReturns the OS-assigned process identifier associated with …\nThe child inherits from the corresponding parent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an <code>ExitStatusError</code> (back) to an <code>ExitStatus</code>.\nForces the child process to exit. If the child has already …\nReturns <code>true</code> if this requires <code>Command</code> to create a new pipe.\nConstructs a new <code>Command</code> for launching the program at path …\nThis stream will be ignored. This is the equivalent of …\nExecutes the command as a child process, waiting for it to …\nA new pipe should be arranged to connect the parent and …\nIs called to get the representation of the value as status …\nExecutes the command as a child process, returning a …\nExecutes a command as a child process, waiting for it to …\nThe status (exit code) of the process.\nConfiguration for the child process’s standard error …\nThe handle for reading from the child’s standard error …\nThe data that the process wrote to stderr.\nConfiguration for the child process’s standard input …\nThe handle for writing to the child’s standard input …\nConfiguration for the child process’s standard output …\nThe handle for reading from the child’s standard output …\nThe data that the process wrote to stdout.\nWas termination successful? Signal termination is not …\nAttempts to collect the exit status of the child if it has …\nWaits for the child to exit completely, returning the …\nSimultaneously waits for the child to exit and collect all …\nA type storing a <code>usize</code> which is a power of two, and thus …\nThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.\nThe smallest possible alignment, 1.\nThe type for metadata in pointers and references to <code>Self</code>.\n<code>*mut T</code> but non-zero and covariant.\nProvides the pointer metadata type of any pointed-to type.\nPointers to types implementing this trait alias are …\nAdds an offset to a pointer (convenience for …\nGets the “address” portion of the pointer.\nCompares the <em>addresses</em> of the two pointers for equality, …\nCreates a <code>const</code> raw pointer to a place, without creating …\nCreates a <code>mut</code> raw pointer to a place, without creating an …\nReturns the alignment of the type associated with this …\nComputes the offset that needs to be applied to the …\nReturns a unique reference to the value. If the value may …\nReturns a raw pointer to the slice’s buffer.\nReturns a non-null pointer to the slice’s buffer.\nReturns the alignment as a NonZero&lt;usize&gt;.\nAcquires the underlying <code>*mut</code> pointer.\nReturns a shared reference to the value. If the value may …\nReturns a unique references to the value. In contrast to …\nReturns a shared references to the value. In contrast to …\nReturns a shared reference to a slice of possibly …\nReturns a unique reference to a slice of possibly …\nReturns the alignment as a <code>usize</code>.\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes.\nCalculates the distance between two pointers within the …\nCalculates the distance between two pointers within the …\nCalculates the offset from a pointer in bytes (convenience …\nCasts to a pointer of another type.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>self</code> to <code>dest</code>. The …\nCreates a new pointer that is dangling, but non-null and …\nCreates a new <code>NonNull</code> that is dangling, but well-aligned.\nCreates a new pointer that is dangling, but non-null and …\nExecutes the destructor (if any) of the pointed-to value.\nExecutes the destructor (if any) of the pointed-to value.\nCompares raw pointers for equality.\nExposes the “provenance” part of the pointer for …\nCompares the <em>addresses</em> of the two function pointers for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.\nConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a mutable reference to a raw pointer.\nConverts a mutable reference to a <code>NonNull</code> pointer.\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>std::ptr::from_raw_parts</code>…\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to a raw pointer.\nConverts a reference to a <code>NonNull</code> pointer.\nReturns a raw pointer to an element or subslice, without …\nHash a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns <code>true</code> if the non-null raw slice has a length of 0.\nReturns the size and alignment together as a <code>Layout</code>\nReturns the length of a non-null raw slice.\nReturns the base-2 logarithm of the alignment.\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nReturns a bit mask that can be used to match this …\nExtracts the metadata component of a pointer.\nCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates a new <code>NonNull</code>.\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReturns the alignment for a type.\nAdds an offset to a pointer.\nCalculates the distance between two pointers within the …\nCalculates the distance between two pointers within the …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nPerforms a volatile read of the value from <code>src</code> without …\nPerforms a volatile read of the value from <code>self</code> without …\nMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …\nReplaces the value at <code>self</code> with <code>src</code>, returning the old …\nReturns the size of the type associated with this vtable.\nForms a raw slice from a pointer and a length.\nCreates a non-null raw slice from a thin pointer and a …\nForms a raw mutable slice from a pointer and a length.\nSubtracts an offset from a pointer (convenience for …\nSwaps the values at two mutable locations of the same …\nSwaps the values at two mutable locations of the same …\nSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …\nDecompose a (possibly wide) pointer into its data pointer …\nTry to cast to a pointer of another type by checking …\nCreates a new pointer with the given address and the …\nConverts an address back to a pointer, picking up some …\nConverts an address back to a mutable pointer, picking up …\nConverts an address back to a mutable pointer, picking up …\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nInvokes memset on the specified pointer, setting …\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nPerforms a volatile write of a memory location with the …\nPerforms a volatile write of a memory location with the …\nThe default random source.\nA trait representing a distribution of random values for a …\nA source of randomness.\nFills <code>bytes</code> with random bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates a random value from a distribution, using the …\nSamples a random value from the distribution, using the …\nAn endpoint of a range of keys.\nAn exclusive bound.\nAn inclusive bound.\nUsed to convert a range into start and end bounds, …\nBy-value <code>Range</code> iterator.\nBy-value <code>RangeFrom</code> iterator.\nBy-value <code>RangeInclusive</code> iterator.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn infinite endpoint. Indicates that there is no bound in …\nReturns the value that would be obtained by taking the …\nAn internal-only helper function for <code>split_off</code> and …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive).\nEnd index bound.\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nCreates an iterator over the elements within this range.\nCreates an iterator over the elements within this range.\nCreates an iterator over the elements within this range.\nLegacy range types\nReturns the remainder of the range being iterated over.\nReturns the remainder of the range being iterated over.\nReturns the remainder of the range being iterated over.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nReturns the bounds on the number of <em>successor</em> steps …\nA (half-open) range bounded inclusively below and …\nA range only bounded inclusively below (<code>start..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nThe upper bound of the range (exclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>.\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Rc&lt;[T]&gt;</code>.\nConverts to <code>Rc&lt;T&gt;</code>.\nMakes a clone of the <code>Rc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Rc</code>s.\nComparison for two <code>UniqueRc</code>s.\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCreates an empty CStr inside an Rc\nCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Rc\nCreates an empty <code>[T]</code> inside an Rc\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nAttempts to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nDowncasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nCreates a new <code>Weak</code> pointer to this allocation.\nCreates a new weak reference to the <code>UniqueRc</code>.\nDrops the <code>Rc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Rc</code>s.\nEquality for two <code>UniqueRc</code>s.\nConverts a reference-counted string slice into a byte …\nConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.\nReturns the argument unchanged.\nAllocates a reference-counted slice and fills it by …\nConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>\nConverts a <code>&amp;mut CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nConverts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nConverts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …\nConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …\nCreates a reference-counted pointer from a clone-on-write …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nMove a boxed object to a new, reference counted, …\nAllocates a reference-counted string slice and copies <code>v</code> …\nAllocates a reference-counted string slice and copies <code>v</code> …\nAllocates a reference-counted string slice and copies <code>v</code> …\nAllocates a reference-counted slice and fills it by …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Rc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided …\nConverts a raw pointer previously created by <code>into_raw</code> back …\n‘Greater than or equal to’ comparison for two <code>Rc</code>s.\n‘Greater than or equal to’ comparison for two <code>UniqueRc</code>…\nReturns a mutable reference into the given <code>Rc</code>, if there are\nReturns a mutable reference into the given <code>Rc</code>, without any …\nGreater-than comparison for two <code>Rc</code>s.\nGreater-than comparison for two <code>UniqueRc</code>s.\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the reference-counted slice into a …\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nConsumes the <code>Rc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Rc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\nConverts the <code>UniqueRc</code> into a regular <code>Rc</code>.\n‘Less than or equal to’ comparison for two <code>Rc</code>s.\n‘Less than or equal to’ comparison for two <code>UniqueRc</code>s.\nLess-than comparison for two <code>Rc</code>s.\nLess-than comparison for two <code>UniqueRc</code>s.\nMakes a mutable reference into the given <code>Rc</code>.\nInequality for two <code>Rc</code>s.\nInequality for two <code>UniqueRc</code>s.\nConstructs a new <code>Rc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new <code>UniqueRc</code>.\nConstructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Rc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Rc</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory, …\nCreates a new <code>UniqueRc</code> in the provided allocator.\nConstructs a new <code>Rc</code> with uninitialized contents.\nConstructs a new <code>Rc</code> with uninitialized contents in the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nPartial comparison for two <code>Rc</code>s.\nPartial comparison for two <code>UniqueRc</code>s.\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>…\nReturns <code>true</code> if the two <code>Rc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nGets the number of strong (<code>Rc</code>) pointers to this allocation.\nGets the number of strong (<code>Rc</code>) pointers pointing to this …\nConstructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …\nConstructs a new <code>Rc&lt;T&gt;</code> in the provided allocator, …\nConstructs a new <code>Rc</code> with uninitialized contents, returning …\nConstructs a new <code>Rc</code> with uninitialized contents, in the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …\nGets the number of <code>Weak</code> pointers to this allocation.\nGets the number of <code>Weak</code> pointers pointing to this …\nContains the error value\nAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained <code>Err</code> value, but never panics.\nReturns a consuming iterator over the possibly contained …\nReturns the contained <code>Ok</code> value, but never panics.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default (if <code>Err</code>), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to a <code>U</code> by applying function <code>f</code> to the …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value, …\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Ok</code> value or computes it from a …\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, …\nThe number of bytes in a bitmask with this many lanes.\nThis type, reinterpreted as bytes.\nMap from the elements of the input vector to the output …\nNumber of elements in this vector.\nSpecifies the number of lanes in a SIMD vector as a type.\nA SIMD vector mask for <code>N</code> elements of width specified by …\nThe mask element type corresponding to this element type.\nMarker trait for types that may be used as SIMD mask …\nA SIMD vector with the shape of <code>[T; N]</code> but the operations …\nSupporting trait for <code>Simd::cast</code>.  Typically doesn’t need …\nMarker trait for types that may be used as SIMD vector …\nThis trait provides a possibly-temporary implementation of …\nStatically guarantees that a lane count is marked as …\nCreates a vector from the elements of another vector.\nConverts SIMD vectors to vectors of bytes\nReturns true if all elements are set, or false otherwise.\nReturns true if any element is set, or false otherwise.\nReturns an array reference containing the entire SIMD …\nReturns a mutable array reference containing the entire …\nConverts the mask to a mask of any other element size.\nReturns the smallest integer greater than or equal to each …\nTraits for comparing and ordering vectors.\nCreates a new vector from the elements of <code>first</code> and <code>second</code>.\nCreates a new mask from the elements of <code>first</code> and <code>second</code>.\nWrites a SIMD vector to the first <code>N</code> elements of a slice.\nProduces a vector where every element has the cosine of …\nDeinterleave two masks.\nDeinterleave two vectors.\nProduces a vector where every element has the exponential …\nProduces a vector where every element has the exponential …\nExtract a vector from another vector.\nExtract a vector from another vector.\nA SIMD vector with one element of type <code>f32</code>.\nA SIMD vector with 16 elements of type <code>f32</code>.\nA SIMD vector with two elements of type <code>f32</code>.\nA SIMD vector with 32 elements of type <code>f32</code>.\nA SIMD vector with four elements of type <code>f32</code>.\nA SIMD vector with 64 elements of type <code>f32</code>.\nA SIMD vector with eight elements of type <code>f32</code>.\nA SIMD vector with one element of type <code>f64</code>.\nA SIMD vector with 16 elements of type <code>f64</code>.\nA SIMD vector with two elements of type <code>f64</code>.\nA SIMD vector with 32 elements of type <code>f64</code>.\nA SIMD vector with four elements of type <code>f64</code>.\nA SIMD vector with 64 elements of type <code>f64</code>.\nA SIMD vector with eight elements of type <code>f64</code>.\nFinds the index of the first set element.\nReturns the largest integer value less than or equal to …\nA <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:\nReturns the floating point’s fractional value, with its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an array of bools to a SIMD mask.\nConverts an array to a SIMD vector.\nCreates an integer value from its representation as a byte …\nCreates a mask from a bitmask.\nConverts a vector of integers to a mask, where 0 …\nConverts a vector of integers to a mask, where 0 …\nCreates an integer value from its representation as a byte …\nCreates a native endian integer value from its memory …\nConverts a slice to a SIMD vector containing <code>slice[..N]</code>.\nReads from potentially discontiguous indices in <code>slice</code> to …\nReads from indices in <code>slice</code> to construct a SIMD vector. If …\nReads elementwise from pointers into a SIMD vector.\nReads from indices in <code>slice</code> to construct a SIMD vector. …\nConditionally read elementwise from pointers into a SIMD …\nReads from indices in <code>slice</code> to construct a SIMD vector. …\nA SIMD vector with one element of type <code>i16</code>.\nA SIMD vector with 16 elements of type <code>i16</code>.\nA SIMD vector with two elements of type <code>i16</code>.\nA SIMD vector with 32 elements of type <code>i16</code>.\nA SIMD vector with four elements of type <code>i16</code>.\nA SIMD vector with 64 elements of type <code>i16</code>.\nA SIMD vector with eight elements of type <code>i16</code>.\nA SIMD vector with one element of type <code>i32</code>.\nA SIMD vector with 16 elements of type <code>i32</code>.\nA SIMD vector with two elements of type <code>i32</code>.\nA SIMD vector with 32 elements of type <code>i32</code>.\nA SIMD vector with four elements of type <code>i32</code>.\nA SIMD vector with 64 elements of type <code>i32</code>.\nA SIMD vector with eight elements of type <code>i32</code>.\nA SIMD vector with one element of type <code>i64</code>.\nA SIMD vector with 16 elements of type <code>i64</code>.\nA SIMD vector with two elements of type <code>i64</code>.\nA SIMD vector with 32 elements of type <code>i64</code>.\nA SIMD vector with four elements of type <code>i64</code>.\nA SIMD vector with 64 elements of type <code>i64</code>.\nA SIMD vector with eight elements of type <code>i64</code>.\nA SIMD vector with one element of type <code>i8</code>.\nA SIMD vector with 16 elements of type <code>i8</code>.\nA SIMD vector with two elements of type <code>i8</code>.\nA SIMD vector with 32 elements of type <code>i8</code>.\nA SIMD vector with four elements of type <code>i8</code>.\nA SIMD vector with 64 elements of type <code>i8</code>.\nA SIMD vector with eight elements of type <code>i8</code>.\nInterleave two masks.\nInterleave two vectors.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA SIMD vector with one element of type <code>isize</code>.\nA SIMD vector with 16 elements of type <code>isize</code>.\nA SIMD vector with two elements of type <code>isize</code>.\nA SIMD vector with 32 elements of type <code>isize</code>.\nA SIMD vector with four elements of type <code>isize</code>.\nA SIMD vector with 64 elements of type <code>isize</code>.\nA SIMD vector with eight elements of type <code>isize</code>.\nReturns the number of elements in this SIMD vector.\nProduces a vector where every element has the natural …\nReads contiguous elements from <code>slice</code>. Elements are read so …\nReads contiguous elements from <code>slice</code>. Elements are read so …\nReads contiguous elements from <code>slice</code>. Each element is read …\nReads contiguous elements from <code>slice</code>. Each element is read …\nReads contiguous elements starting at <code>ptr</code>. Each element is …\nReads contiguous elements from <code>slice</code>. Each element is read …\nProduces a vector where every element has the logarithm …\nProduces a vector where every element has the base-10 …\nProduces a vector where every element has the base-2 …\nA SIMD mask with one element for vectors with 16-bit …\nA SIMD mask with 16 elements for vectors with 16-bit …\nA SIMD mask with two elements for vectors with 16-bit …\nA SIMD mask with 32 elements for vectors with 16-bit …\nA SIMD mask with four elements for vectors with 16-bit …\nA SIMD mask with 64 elements for vectors with 16-bit …\nA SIMD mask with eight elements for vectors with 16-bit …\nA SIMD mask with one element for vectors with 32-bit …\nA SIMD mask with 16 elements for vectors with 32-bit …\nA SIMD mask with two elements for vectors with 32-bit …\nA SIMD mask with 32 elements for vectors with 32-bit …\nA SIMD mask with four elements for vectors with 32-bit …\nA SIMD mask with 64 elements for vectors with 32-bit …\nA SIMD mask with eight elements for vectors with 32-bit …\nA SIMD mask with one element for vectors with 64-bit …\nA SIMD mask with 16 elements for vectors with 64-bit …\nA SIMD mask with two elements for vectors with 64-bit …\nA SIMD mask with 32 elements for vectors with 64-bit …\nA SIMD mask with four elements for vectors with 64-bit …\nA SIMD mask with 64 elements for vectors with 64-bit …\nA SIMD mask with eight elements for vectors with 64-bit …\nA SIMD mask with one element for vectors with 8-bit …\nA SIMD mask with 16 elements for vectors with 8-bit …\nA SIMD mask with two elements for vectors with 8-bit …\nA SIMD mask with 32 elements for vectors with 8-bit …")
searchState.loadedDescShard("cs431_homework", 1, "Return vector of type __m256h with all elements set to …\nReturns vector of type __m256 with all elements set to …\nReturns vector of type __m256i with all elements set to …\nThis intrinsic is one of the two SHA512 message scheduling …\nThis intrinsic is one of the two SHA512 message scheduling …\nThis intrinsic performs two rounds of SHA512 operation …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …\nShuffles bytes from <code>a</code> according to the content of <code>b</code>.\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffles double-precision (64-bit) floating-point elements …\nShuffles single-precision (32-bit) floating-point elements …\nShuffles 16-bit integers in the high 64 bits of 128-bit …\nShuffles 16-bit integers in the low 64 bits of 128-bit …\nNegates packed 16-bit integers in <code>a</code> when the corresponding …\nNegates packed 32-bit integers in <code>a</code> when the corresponding …\nNegates packed 8-bit integers in <code>a</code> when the corresponding …\nShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …\nShifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …\nShift packed 16-bit integers in a left by the amount …\nShifts packed 32-bit integers in <code>a</code> left by the amount …\nShifts packed 64-bit integers in <code>a</code> left by the amount …\nThis intrinsic performs four rounds of SM4 key expansion. …\nThis intrinsic performs four rounds of SM4 encryption. The …\nReturns the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nReturns the square root of packed single-precision …\nShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …\nShift packed 64-bit integers in a right by count while …\nShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShifts packed 32-bit integers in <code>a</code> right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …\nShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …\nShifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …\nShift packed 16-bit integers in a right by the amount …\nShifts packed 32-bit integers in <code>a</code> right by the amount …\nShifts packed 64-bit integers in <code>a</code> right by the amount …\nStore 256-bits (composed of 8 packed 32-bit integers) from …\nStore 256-bits (composed of 4 packed 64-bit integers) from …\nStores 256-bits (composed of 4 packed double-precision …\nStore 256-bits (composed of 16 packed half-precision …\nStores 256-bits (composed of 8 packed single-precision …\nStores 256-bits of integer data from <code>a</code> into memory. …\nStores the high and low 128-bit halves (each composed of 4 …\nStores the high and low 128-bit halves (each composed of 2 …\nStores the high and low 128-bit halves (each composed of …\nStore 256-bits (composed of 16 packed 16-bit integers) …\nStore 256-bits (composed of 8 packed 32-bit integers) from …\nStore 256-bits (composed of 4 packed 64-bit integers) from …\nStore 256-bits (composed of 32 packed 8-bit integers) from …\nStores 256-bits (composed of 4 packed double-precision …\nStore 256-bits (composed of 16 packed half-precision …\nStores 256-bits (composed of 8 packed single-precision …\nStores 256-bits of integer data from <code>a</code> into memory. …\nLoad 256-bits of integer data from memory into dst using a …\nMoves double-precision values from a 256-bit vector of …\nMoves single-precision floating point values from a …\nMoves integer data from a 256-bit integer vector to a …\nSubtract packed 16-bit integers in <code>b</code> from packed 16-bit …\nSubtract packed 32-bit integers in <code>b</code> from packed 32-bit …\nSubtract packed 64-bit integers in <code>b</code> from packed 64-bit …\nSubtract packed 8-bit integers in <code>b</code> from packed 8-bit …\nSubtracts packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtracts packed single-precision (32-bit) floating-point …\nSubtract packed 16-bit integers in <code>b</code> from packed 16-bit …\nSubtract packed 8-bit integers in <code>b</code> from packed 8-bit …\nSubtract packed unsigned 16-bit integers in <code>b</code> from packed …\nSubtract packed unsigned 8-bit integers in <code>b</code> from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nComputes the bitwise AND of 256 bits (representing …\nComputes the bitwise AND of 256 bits (representing …\nComputes the bitwise AND of 256 bits (representing integer …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nComputes the bitwise AND of 256 bits (representing …\nComputes the bitwise AND of 256 bits (representing …\nComputes the bitwise AND of 256 bits (representing integer …\nComputes the bitwise AND of 256 bits (representing …\nComputes the bitwise AND of 256 bits (representing …\nComputes the bitwise AND of 256 bits (representing integer …\nReturns vector of type <code>__m256d</code> with indeterminate elements.\nReturn vector of type <code>__m256h</code> with indetermination …\nReturns vector of type <code>__m256</code> with indeterminate elements. …\nReturns vector of type __m256i with with indeterminate …\nUnpacks and interleave 16-bit integers from the high half …\nUnpacks and interleave 32-bit integers from the high half …\nUnpacks and interleave 64-bit integers from the high half …\nUnpacks and interleave 8-bit integers from the high half …\nUnpacks and interleave double-precision (64-bit) …\nUnpacks and interleave single-precision (32-bit) …\nUnpacks and interleave 16-bit integers from the low half …\nUnpacks and interleave 32-bit integers from the low half …\nUnpacks and interleave 64-bit integers from the low half …\nUnpacks and interleave 8-bit integers from the low half of …\nUnpacks and interleave double-precision (64-bit) …\nUnpacks and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nComputes the bitwise XOR of packed double-precision …\nComputes the bitwise XOR of packed single-precision …\nComputes the bitwise XOR of 256 bits (representing integer …\nZeroes the contents of all XMM or YMM registers.\nZeroes the upper 128 bits of all YMM registers; the lower …\nConstructs a 256-bit floating-point vector of <code>[4 x double]</code> …\nCast vector of type <code>__m256h</code> to type <code>__m128h</code>. The upper 8 …\nConstructs a 256-bit floating-point vector of <code>[8 x float]</code> …\nConstructs a 256-bit integer vector from a 128-bit integer …\nCompute the absolute value of packed signed 16-bit …\nComputes the absolute values of packed 32-bit integers in <code>a</code>…\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nFinds the absolute value of each packed double-precision …\nFinds the absolute value of each packed half-precision …\nFinds the absolute value of each packed single-precision …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nPerforms one round of an AES decryption flow on each …\nPerforms the last round of an AES decryption flow on each …\nPerforms one round of an AES encryption flow on each …\nPerforms the last round of an AES encryption flow on each …\nConcatenate a and b into a 128-byte immediate result, …\nConcatenate a and b into a 128-byte immediate result, …\nConcatenate pairs of 16-byte blocks in a and b into a …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of 512 bits (composed of packed …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise AND of 512 bits (representing integer …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of 512 bits (composed of packed …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nCompute the bitwise NOT of 512 bits (representing integer …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nConsiders the input <code>b</code> as packed 64-bit integers and <code>c</code> as …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 8 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcast the 4 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 8 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcast the 4 packed 64-bit integers from a to all …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low 8-bits from input mask k to all 64-bit …\nBroadcast the low 16-bits from input mask k to all 32-bit …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low double-precision (64-bit) floating-point …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nShift 128-bit lanes in a left by imm8 bytes while shifting …\nShift 128-bit lanes in a right by imm8 bytes while …\nCast vector of type __m128d to type __m512d; the upper 384 …\nCast vector of type __m256d to type __m512d; the upper 256 …\nCast vector of type __m512d to type __m128d. This …\nCast vector of type __m512d to type __m256d. This …\nCast vector of type <code>__m512d</code> to type <code>__m512h</code>. This …\nCast vector of type __m512d to type __m512. This intrinsic …\nCast vector of type __m512d to type __m512i. This …\nCast vector of type <code>__m128h</code> to type <code>__m512h</code>. The upper 24 …\nCast vector of type <code>__m256h</code> to type <code>__m512h</code>. The upper 16 …\nCast vector of type <code>__m512h</code> to type <code>__m128h</code>. This …\nCast vector of type <code>__m512h</code> to type <code>__m256h</code>. This …\nCast vector of type <code>__m512h</code> to type <code>__m512d</code>. This …\nCast vector of type <code>__m512h</code> to type <code>__m512</code>. This intrinsic …\nCast vector of type <code>__m512h</code> to type <code>__m512i</code>. This …\nCast vector of type __m128 to type __m512; the upper 384 …\nCast vector of type __m256 to type __m512; the upper 256 …\nCast vector of type __m512 to type __m128. This intrinsic …\nCast vector of type __m512 to type __m256. This intrinsic …\nCast vector of type __m512 to type __m512d. This intrinsic …\nCast vector of type <code>__m512</code> to type <code>__m512h</code>. This intrinsic …\nCast vector of type __m512 to type __m512i. This intrinsic …\nCast vector of type __m128i to type __m512i; the upper 384 …\nCast vector of type __m256i to type __m512i; the upper 256 …\nCast vector of type __m512i to type __m512d. This …\nCast vector of type <code>__m512i</code> to type <code>__m512h</code>. This …\nCast vector of type __m512i to type __m512. This intrinsic …\nCast vector of type __m512i to type __m128i. This …\nCast vector of type __m512i to type __m256i. This …\nPerforms a carry-less multiplication of two 64-bit …\nCompare packed signed 16-bit integers in a and b based on …\nCompare packed signed 32-bit integers in a and b based on …\nCompare packed signed 64-bit integers in a and b based on …\nCompare packed signed 8-bit integers in a and b based on …\nCompare packed unsigned 16-bit integers in a and b based …\nCompare packed unsigned 32-bit integers in a and b based …\nCompare packed unsigned 64-bit integers in a and b based …\nCompare packed unsigned 8-bit integers in a and b based on …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for equality, …\nCompare packed 64-bit integers in a and b for equality, …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for not-equal, …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nPerforms element-by-element conversion of the lower half …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 8 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nPerforms element-by-element conversion of the lower half …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in the low 8 …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nPerforms an element-by-element conversion of packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nPerforms element-by-element conversion of the lower half …\nCopy the lower double-precision (64-bit) floating-point …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nCopy the lower half-precision (16-bit) floating-point …\nCopy the lower 32-bit integer in a to dst.\nCopy the lower single-precision (32-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 256 bits (composed of 8 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtract 256 bits (composed of 4 packed double-precision …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 256 bits (composed of 8 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nExtract 256 bits (composed of 4 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nGather 32-bit integers from memory using 32-bit indices. …\nGather 64-bit integers from memory using 32-bit indices. …\nGather double-precision (64-bit) floating-point elements …\nGather single-precision (32-bit) floating-point elements …\nLoads 8 64-bit integer elements from memory starting at …\nLoads 8 double-precision (64-bit) floating-point elements …\nStores 8 64-bit integer elements from a to memory starting …\nStores 8 double-precision (64-bit) floating-point elements …\nScatter 32-bit integers from a into memory using 32-bit …\nScatter 64-bit integers from a into memory using 32-bit …\nScatter double-precision (64-bit) floating-point elements …\nScatter single-precision (32-bit) floating-point elements …\nGather 32-bit integers from memory using 64-bit indices. …\nGather 64-bit integers from memory using 64-bit indices. …\nGather double-precision (64-bit) floating-point elements …\nGather single-precision (32-bit) floating-point elements …\nScatter 32-bit integers from a into memory using 64-bit …\nScatter 64-bit integers from a into memory using 64-bit …\nScatter double-precision (64-bit) floating-point elements …\nScatter single-precision (32-bit) floating-point elements …\nCopy a to dst, then insert 128 bits (composed of 4 packed …\nCopy a to dst, then insert 256 bits (composed of 8 packed …\nCopy a to dst, then insert 128 bits (composed of 2 packed …\nCopy a to dst, then insert 256 bits (composed of 4 packed …\nCopy a to dst, then insert 128 bits (composed of 4 packed …\nCopy a to dst, then insert 256 bits (composed of 8 packed …\nCopy a to dst, then insert 128 bits (composed of 2 packed …\nCopy a to dst, then insert 256 bits (composed of 4 packed …\nConverts integer mask into bitmask, storing the result in …\nCompute the bitwise AND of 16-bit masks a and b, and store …\nCompute the bitwise NOT of 16-bit masks a and then AND …\nCopy 16-bit mask a to k.\nCompute the bitwise NOT of 16-bit mask a, and store the …\nCompute the bitwise OR of 16-bit masks a and b, and store …\nPerforms bitwise OR between k1 and k2, storing the result …\nPerforms bitwise OR between k1 and k2, storing the result …\nUnpack and interleave 8 bits from masks a and b, and store …\nUnpack and interleave 32 bits from masks a and b, and …\nUnpack and interleave 16 bits from masks a and b, and …\nCompute the bitwise XNOR of 16-bit masks a and b, and …\nCompute the bitwise XOR of 16-bit masks a and b, and store …\nLoad 512-bits (composed of 16 packed 32-bit integers) from …\nLoad 512-bits (composed of 8 packed 64-bit integers) from …\nLoad 512-bits (composed of 8 packed double-precision …\nLoad 512-bits (composed of 32 packed half-precision …\nLoad 512-bits (composed of 16 packed single-precision …\nLoad 512-bits of integer data from memory into dst. …\nLoad 512-bits (composed of 32 packed 16-bit integers) from …\nLoad 512-bits (composed of 16 packed 32-bit integers) from …\nLoad 512-bits (composed of 8 packed 64-bit integers) from …\nLoad 512-bits (composed of 64 packed 8-bit integers) from …\nLoads 512-bits (composed of 8 packed double-precision …\nLoad 512-bits (composed of 32 packed half-precision …\nLoads 512-bits (composed of 16 packed single-precision …\nLoad 512-bits of integer data from memory into dst. …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nVertically multiply each unsigned 8-bit integer from a …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nConverts bit mask k1 into an integer value, storing the …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nCompute the absolute value of packed signed 16-bit …\nComputes the absolute value of packed 32-bit integers in <code>a</code>…\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nFinds the absolute value of each packed double-precision …\nFinds the absolute value of each packed single-precision …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nConcatenate a and b into a 128-byte immediate result, …\nConcatenate a and b into a 128-byte immediate result, …\nConcatenate pairs of 16-byte blocks in a and b into a …\nPerforms element-by-element bitwise AND between packed …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of packed 64-bit integers in a and …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nConsiders the input <code>b</code> as packed 64-bit integers and <code>c</code> as …\nBlend packed 16-bit integers from a and b using control …\nBlend packed 32-bit integers from a and b using control …\nBlend packed 64-bit integers from a and b using control …\nBlend packed 8-bit integers from a and b using control …\nBlend packed double-precision (64-bit) floating-point …\nBlend packed half-precision (16-bit) floating-point …\nBlend packed single-precision (32-bit) floating-point …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 8 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcast the 4 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 8 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcast the 4 packed 64-bit integers from a to all …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low double-precision (64-bit) floating-point …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nCompare packed signed 16-bit integers in a and b based on …\nCompare packed signed 32-bit integers in a and b based on …\nCompare packed signed 64-bit integers in a and b based on …\nCompare packed signed 8-bit integers in a and b based on …\nCompare packed unsigned 16-bit integers in a and b based …\nCompare packed unsigned 32-bit integers in a and b based …\nCompare packed unsigned 64-bit integers in a and b based …\nCompare packed unsigned 8-bit integers in a and b based on …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for equality, …\nCompare packed 64-bit integers in a and b for equality, …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed signed 32-bit integers in a and b for …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b for …\nCompare packed 32-bit integers in a and b for not-equal, …\nCompare packed signed 64-bit integers in a and b for …\nCompare packed signed 8-bit integers in a and b for …\nCompare packed unsigned 16-bit integers in a and b for …\nCompare packed unsigned 32-bit integers in a and b for …\nCompare packed unsigned 64-bit integers in a and b for …\nCompare packed unsigned 8-bit integers in a and b for …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nPerforms element-by-element conversion of the lower half …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 8 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nPerforms element-by-element conversion of the lower half …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in the low 8 …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nPerforms an element-by-element conversion of packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nPerforms element-by-element conversion of the lower half …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 256 bits (composed of 8 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtract 256 bits (composed of 4 packed double-precision …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 256 bits (composed of 8 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nExtract 256 bits (composed of 4 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nTest packed double-precision (64-bit) floating-point …\nTest packed half-precision (16-bit) floating-point …\nTest packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nGather 32-bit integers from memory using 32-bit indices. …\nGather 64-bit integers from memory using 32-bit indices. …\nGather double-precision (64-bit) floating-point elements …\nGather single-precision (32-bit) floating-point elements …\nLoads 8 64-bit integer elements from memory starting at …\nLoads 8 double-precision (64-bit) floating-point elements …\nStores 8 64-bit integer elements from a to memory starting …\nStores 8 double-precision (64-bit) floating-point elements …\nScatter 32-bit integers from a into memory using 32-bit …\nScatter 64-bit integers from a into memory using 32-bit …\nScatter double-precision (64-bit) floating-point elements …\nScatter single-precision (32-bit) floating-point elements …\nGather 32-bit integers from memory using 64-bit indices. …\nGather 64-bit integers from memory using 64-bit indices. …\nGather double-precision (64-bit) floating-point elements …\nGather single-precision (32-bit) floating-point elements …\nScatter 32-bit integers from a into memory using 64-bit …\nScatter 64-bit integers from a into memory using 64-bit …\nScatter double-precision (64-bit) floating-point elements …\nScatter single-precision (32-bit) floating-point elements …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 256 bits (composed of 8 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nCopy a to tmp, then insert 256 bits (composed of 4 packed …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 256 bits (composed of 8 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nCopy a to tmp, then insert 256 bits (composed of 4 packed …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nLoad packed 16-bit integers from memory into dst using …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed 8-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply packed unsigned 8-bit integers in a by packed …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nMove packed 16-bit integers from a into dst using …\nMove packed 32-bit integers from a to dst using writemask …\nMove packed 64-bit integers from a to dst using writemask …\nMove packed 8-bit integers from a into dst using writemask …\nMove packed double-precision (64-bit) floating-point …\nMove packed single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed complex numbers in a and b, and store …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nMultiplies elements in packed 64-bit integer vectors a and …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 32-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 64-bit integers in a within 256-bit lanes using …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 32-bit integers in a across lanes using the …\nShuffle 64-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed 16-bit …\nReduce the packed 32-bit integers in a by addition using …\nReduce the packed 64-bit integers in a by addition using …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed 32-bit integers in a by bitwise AND …\nReduce the packed 64-bit integers in a by addition using …\nReduce the packed signed 32-bit integers in a by maximum …\nReduce the packed signed 64-bit integers in a by maximum …\nReduce the packed unsigned 32-bit integers in a by maximum …\nReduce the packed unsigned 64-bit integers in a by maximum …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed signed 32-bit integers in a by maximum …\nReduce the packed signed 64-bit integers in a by maximum …\nReduce the packed unsigned 32-bit integers in a by maximum …\nReduce the packed signed 64-bit integers in a by maximum …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed 32-bit integers in a by multiplication …\nReduce the packed 64-bit integers in a by multiplication …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed 32-bit integers in a by bitwise OR using …\nReduce the packed 64-bit integers in a by bitwise OR using …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast 16-bit integer a to all elements of dst using …\nBroadcast 32-bit integer a to all elements of dst using …\nBroadcast 64-bit integer a to all elements of dst using …\nBroadcast 8-bit integer a to all elements of dst using …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle 32-bit integers in a within 128-bit lanes using …\nShuffle 8-bit integers in a within 128-bit lanes using the …\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nStore packed 32-bit integers from a into memory using …\nStore packed 64-bit integers from a into memory using …\nStore packed double-precision (64-bit) floating-point …\nStore packed single-precision (32-bit) floating-point …\nStore packed 16-bit integers from a into memory using …\nStore packed 32-bit integers from a into memory using …\nStore packed 64-bit integers from a into memory using …\nStore packed 8-bit integers from a into memory using …\nStore packed double-precision (64-bit) floating-point …\nStore packed single-precision (32-bit) floating-point …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nCompute the absolute value of packed signed 16-bit …\nComputes the absolute value of packed 32-bit integers in <code>a</code>…\nCompute the absolute value of packed signed 64-bit …\nCompute the absolute value of packed signed 8-bit integers …\nAdd packed 16-bit integers in a and b, and store the …\nAdd packed 32-bit integers in a and b, and store the …\nAdd packed 64-bit integers in a and b, and store the …\nAdd packed 8-bit integers in a and b, and store the …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed double-precision (64-bit) floating-point …\nAdd packed half-precision (16-bit) floating-point elements …\nAdd packed single-precision (32-bit) floating-point …\nAdd packed signed 16-bit integers in a and b using …\nAdd packed signed 8-bit integers in a and b using …\nAdd packed unsigned 16-bit integers in a and b using …\nAdd packed unsigned 8-bit integers in a and b using …\nConcatenate a and b into a 128-byte immediate result, …\nConcatenate a and b into a 128-byte immediate result, …\nConcatenate pairs of 16-byte blocks in a and b into a …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed double-precision …\nCompute the bitwise AND of packed single-precision …\nCompute the bitwise NOT of packed 32-bit integers in a and …\nCompute the bitwise NOT of packed 64-bit integers in a and …\nCompute the bitwise NOT of packed double-precision …\nCompute the bitwise NOT of packed single-precision …\nAverage packed unsigned 16-bit integers in a and b, and …\nAverage packed unsigned 8-bit integers in a and b, and …\nBroadcasts the lower 2 packed single-precision (32-bit) …\nBroadcast the 4 packed single-precision (32-bit) …\nBroadcasts the 8 packed single-precision (32-bit) …\nBroadcasts the 2 packed double-precision (64-bit) …\nBroadcast the 4 packed double-precision (64-bit) …\nBroadcasts the lower 2 packed 32-bit integers from a to …\nBroadcast the 4 packed 32-bit integers from a to all …\nBroadcasts the 8 packed 32-bit integers from a to all …\nBroadcasts the 2 packed 64-bit integers from a to all …\nBroadcast the 4 packed 64-bit integers from a to all …\nBroadcast the low packed 8-bit integer from a to all …\nBroadcast the low packed 32-bit integer from a to all …\nBroadcast the low packed 64-bit integer from a to all …\nBroadcast the low double-precision (64-bit) floating-point …\nBroadcast the low single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nContiguously store the active 16-bit integers in a (those …\nContiguously store the active 32-bit integers in a (those …\nContiguously store the active 64-bit integers in a (those …\nContiguously store the active 8-bit integers in a (those …\nContiguously store the active double-precision (64-bit) …\nContiguously store the active single-precision (32-bit) …\nTest each 32-bit element of a for equality with all other …\nTest each 64-bit element of a for equality with all other …\nCompute the complex conjugates of complex numbers in a, …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nSign extend packed 16-bit integers in a to packed 32-bit …\nSign extend packed 16-bit integers in a to packed 64-bit …\nConvert packed 16-bit integers in a to packed 8-bit …\nConvert packed signed 16-bit integers in a to packed …\nConvert packed 32-bit integers in a to packed 16-bit …\nSign extend packed 32-bit integers in a to packed 64-bit …\nConvert packed 32-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed 64-bit integers in a to packed 16-bit …\nConvert packed 64-bit integers in a to packed 32-bit …\nConvert packed 64-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nSign extend packed 8-bit integers in a to packed 16-bit …\nSign extend packed 8-bit integers in a to packed 32-bit …\nSign extend packed 8-bit integers in the low 8 bytes of a …\nZero extend packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 16-bit integers in a to packed …\nZero extend packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in a to packed …\nZero extend packed unsigned 8-bit integers in the low 8 …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConverts packed BF16 (16-bit) floating-point elements in a …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed signed 16-bit integers in a to packed 8-bit …\nConvert packed signed 32-bit integers in a to packed …\nConvert packed signed 32-bit integers in a to packed 8-bit …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed …\nConvert packed signed 64-bit integers in a to packed 8-bit …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed double-precision (64-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed double-precision (32-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed unsigned 16-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 32-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed unsigned 64-bit integers in a to packed …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nConvert packed half-precision (16-bit) floating-point …\nConvert packed single-precision (32-bit) floating-point …\nCompute the sum of absolute differences (SADs) of …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nDivide packed double-precision (64-bit) floating-point …\nDivide packed half-precision (16-bit) floating-point …\nDivide packed single-precision (32-bit) floating-point …\nCompute dot-product of BF16 (16-bit) floating-point pairs …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 4 adjacent pairs of unsigned 8-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nMultiply groups of 2 adjacent pairs of signed 16-bit …\nLoad contiguous active 16-bit integers from a (those with …\nLoad contiguous active 32-bit integers from a (those with …\nLoad contiguous active 64-bit integers from a (those with …\nLoad contiguous active 8-bit integers from a (those with …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nLoad contiguous active 16-bit integers from unaligned …\nLoad contiguous active 32-bit integers from unaligned …\nLoad contiguous active 64-bit integers from unaligned …\nLoad contiguous active 8-bit integers from unaligned …\nLoad contiguous active double-precision (64-bit) …\nLoad contiguous active single-precision (32-bit) …\nExtract 128 bits (composed of 4 packed single-precision …\nExtracts 256 bits (composed of 8 packed single-precision …\nExtracts 128 bits (composed of 2 packed double-precision …\nExtract 256 bits (composed of 4 packed double-precision …\nExtract 128 bits (composed of 4 packed 32-bit integers) …\nExtracts 256 bits (composed of 8 packed 32-bit integers) …\nExtracts 128 bits (composed of 2 packed 64-bit integers) …\nExtract 256 bits (composed of 4 packed 64-bit integers) …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nMultiply packed complex numbers in a by the complex …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nFix up packed double-precision (64-bit) floating-point …\nFix up packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, accumulate to …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nConvert the exponent of each packed double-precision …\nConvert the exponent of each packed half-precision …\nConvert the exponent of each packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nNormalize the mantissas of packed double-precision …\nNormalize the mantissas of packed half-precision (16-bit) …\nNormalize the mantissas of packed single-precision …\nPerforms an affine transformation on the packed bytes in x.\nPerforms an affine transformation on the inverted packed …\nPerforms a multiplication in GF(2^8) on the packed bytes. …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 256 bits (composed of 8 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nCopy a to tmp, then insert 256 bits (composed of 4 packed …\nCopy a to tmp, then insert 128 bits (composed of 4 packed …\nCopy a to tmp, then insert 256 bits (composed of 8 packed …\nCopy a to tmp, then insert 128 bits (composed of 2 packed …\nCopy a to tmp, then insert 256 bits (composed of 4 packed …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nLoad packed 16-bit integers from memory into dst using …\nLoad packed 32-bit integers from memory into dst using …\nLoad packed 64-bit integers from memory into dst using …\nLoad packed 8-bit integers from memory into dst using …\nLoad packed double-precision (64-bit) floating-point …\nLoad packed single-precision (32-bit) floating-point …\nCounts the number of leading zero bits in each packed …\nCounts the number of leading zero bits in each packed …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed unsigned 52-bit integers in each 64-bit …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply packed unsigned 8-bit integers in a by packed …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nMove packed 16-bit integers from a into dst using zeromask …\nMove packed 32-bit integers from a into dst using zeromask …\nMove packed 64-bit integers from a into dst using zeromask …\nMove packed 8-bit integers from a into dst using zeromask …\nMove packed double-precision (64-bit) floating-point …\nMove packed single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed complex numbers in a and b, and store …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 64-bit integers in a within 256-bit lanes using …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 32-bit integers in a across lanes using the …\nShuffle 64-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed 16-bit …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nBroadcast 32-bit integer a to all elements of dst using …\nBroadcast 64-bit integer a to all elements of dst using …\nBroadcast 8-bit integer a to all elements of dst using …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle 32-bit integers in a within 128-bit lanes using …\nShuffle packed 8-bit integers in a according to shuffle …\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed signed 16-bit integers in a and b, and …\nCompare packed signed 32-bit integers in a and b, and …\nCompare packed signed 64-bit integers in a and b, and …\nCompare packed signed 8-bit integers in a and b, and store …\nCompare packed unsigned 16-bit integers in a and b, and …\nCompare packed unsigned 32-bit integers in a and b, and …\nCompare packed unsigned 64-bit integers in a and b, and …\nCompare packed unsigned 8-bit integers in a and b, and …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nCompare packed double-precision (64-bit) floating-point …\nCompare packed half-precision (16-bit) floating-point …\nCompare packed single-precision (32-bit) floating-point …\nDuplicate even-indexed double-precision (64-bit) …\nDuplicate odd-indexed single-precision (32-bit) …\nDuplicate even-indexed single-precision (32-bit) …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each bit of mask register k based on the most …\nSet each packed 16-bit integer in dst to all ones or all …\nSet each packed 32-bit integer in dst to all ones or all …\nSet each packed 64-bit integer in dst to all ones or all …\nSet each packed 8-bit integer in dst to all ones or all …\nMultiply the low signed 32-bit integers from each packed …\nMultiply the low unsigned 32-bit integers from each packed …\nMultiply packed complex numbers in a and b, and store the …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed complex numbers in a and b, and store …\nMultiply packed double-precision (64-bit) floating-point …\nMultiply packed half-precision (16-bit) floating-point …\nMultiply packed single-precision (32-bit) floating-point …\nMultiply the packed signed 16-bit integers in a and b, …\nMultiply the packed unsigned 16-bit integers in a and b, …\nMultiply packed signed 16-bit integers in a and b, …\nMultiply the packed 16-bit integers in a and b, producing …\nMultiply the packed 32-bit integers in a and b, producing …\nMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing …\nMultiplies elements in packed 64-bit integer vectors a and …\nFor each 64-bit element in b, select 8 unaligned bytes …\nCompute the bitwise OR of packed 32-bit integers in a and …\nCompute the bitwise OR of packed 64-bit integers in a and …\nCompute the bitwise OR of packed double-precision (64-bit) …\nCompute the bitwise OR of packed single-precision (32-bit) …\nCompute the bitwise OR of 512 bits (representing integer …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nConvert packed signed 16-bit integers from a and b to …\nConvert packed signed 32-bit integers from a and b to …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 32-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in a and b across lanes using the …\nShuffle 32-bit integers in a and b across lanes using the …\nShuffle 64-bit integers in a and b across lanes using the …\nShuffle 8-bit integers in a and b across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle half-precision (16-bit) floating-point elements in …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 64-bit integers in a within 256-bit lanes using …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle 16-bit integers in a across lanes using the …\nShuffle 32-bit integers in a across lanes using the …\nShuffle 64-bit integers in a across lanes using the …\nShuffle 8-bit integers in a across lanes using the …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle half-precision (16-bit) floating-point elements in …\nShuffle single-precision (32-bit) floating-point elements …\nFor each packed 16-bit integer maps the value to the …\nFor each packed 32-bit integer maps the value to the …\nFor each packed 64-bit integer maps the value to the …\nFor each packed 8-bit integer maps the value to the number …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCalculate the max, min, absolute max, or absolute min …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed …\nCompute the approximate reciprocal of packed 16-bit …\nReduce the packed 32-bit integers in a by addition. …\nReduce the packed 64-bit integers in a by addition. …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed 32-bit integers in a by bitwise AND. …\nReduce the packed 64-bit integers in a by bitwise AND. …\nReduce the packed signed 32-bit integers in a by maximum. …\nReduce the packed signed 64-bit integers in a by maximum. …\nReduce the packed unsigned 32-bit integers in a by …\nReduce the packed unsigned 64-bit integers in a by …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed signed 32-bit integers in a by minimum. …\nReduce the packed signed 64-bit integers in a by minimum. …\nReduce the packed unsigned 32-bit integers in a by …\nReduce the packed unsigned 64-bit integers in a by …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed 32-bit integers in a by multiplication. …\nReduce the packed 64-bit integers in a by multiplication. …\nReduce the packed double-precision (64-bit) floating-point …\nReduce the packed half-precision (16-bit) floating-point …\nReduce the packed single-precision (32-bit) floating-point …\nReduce the packed 32-bit integers in a by bitwise OR. …\nReduce the packed 64-bit integers in a by bitwise OR. …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nExtract the reduced argument of packed double-precision …\nExtract the reduced argument of packed half-precision …\nExtract the reduced argument of packed single-precision …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRotate the bits in each packed 32-bit integer in a to the …\nRotate the bits in each packed 64-bit integer in a to the …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nRound packed double-precision (64-bit) floating-point …\nRound packed half-precision (16-bit) floating-point …\nRound packed single-precision (32-bit) floating-point …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the approximate reciprocal square root of packed …\nCompute the absolute differences of packed unsigned 8-bit …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nScale the packed double-precision (64-bit) floating-point …\nScale the packed half-precision (16-bit) floating-point …\nScale the packed single-precision (32-bit) floating-point …\nBroadcast the low packed 16-bit integer from a to all …\nBroadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.\nBroadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.\nBroadcast 8-bit integer a to all elements of dst.\nBroadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.\nBroadcast the half-precision (16-bit) floating-point value …\nBroadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.\nSet packed 32-bit integers in dst with the repeated 4 …\nSet packed 64-bit integers in dst with the repeated 4 …\nSet packed double-precision (64-bit) floating-point …\nSet packed single-precision (32-bit) floating-point …\nSet packed 16-bit integers in dst with the supplied values.\nSets packed 32-bit integers in <code>dst</code> with the supplied …\nSet packed 64-bit integers in dst with the supplied values.\nSet packed 8-bit integers in dst with the supplied values.\nSet packed double-precision (64-bit) floating-point …\nSet packed half-precision (16-bit) floating-point elements …\nSets packed 32-bit integers in <code>dst</code> with the supplied …\nSet packed 32-bit integers in dst with the repeated 4 …\nSet packed 64-bit integers in dst with the repeated 4 …\nSet packed double-precision (64-bit) floating-point …\nSet packed single-precision (32-bit) floating-point …\nSets packed 32-bit integers in <code>dst</code> with the supplied …\nSet packed 64-bit integers in dst with the supplied values …\nSet packed double-precision (64-bit) floating-point …\nSet packed half-precision (16-bit) floating-point elements …\nSets packed 32-bit integers in <code>dst</code> with the supplied …\nReturn vector of type <code>__m512</code> with all elements set to zero.\nReturn vector of type <code>__m512i</code> with all elements set to …\nReturns vector of type <code>__m512d</code> with all elements set to …\nReturn vector of type __m512h with all elements set to …\nReturns vector of type <code>__m512</code> with all elements set to …\nReturns vector of type <code>__m512i</code> with all elements set to …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in a and b producing an …\nConcatenate packed 32-bit integers in a and b producing an …\nConcatenate packed 64-bit integers in a and b producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nConcatenate packed 16-bit integers in b and a producing an …\nConcatenate packed 32-bit integers in b and a producing an …\nConcatenate packed 64-bit integers in b and a producing an …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle packed 8-bit integers in a according to shuffle …\nShuffle 128-bits (composed of 4 single-precision (32-bit) …\nShuffle 128-bits (composed of 2 double-precision (64-bit) …\nShuffle 128-bits (composed of 4 32-bit integers) selected …\nShuffle 128-bits (composed of 2 64-bit integers) selected …\nShuffle double-precision (64-bit) floating-point elements …\nShuffle single-precision (32-bit) floating-point elements …\nShuffle 16-bit integers in the high 64 bits of 128-bit …\nShuffle 16-bit integers in the low 64 bits of 128-bit …\nShift packed 16-bit integers in a left by count while …\nShift packed 32-bit integers in a left by count while …\nShift packed 64-bit integers in a left by count while …\nShift packed 16-bit integers in a left by imm8 while …\nShift packed 32-bit integers in a left by imm8 while …\nShift packed 64-bit integers in a left by imm8 while …\nShift packed 16-bit integers in a left by the amount …\nShift packed 32-bit integers in a left by the amount …\nShift packed 64-bit integers in a left by the amount …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nCompute the square root of packed double-precision …\nCompute the square root of packed half-precision (16-bit) …\nCompute the square root of packed single-precision …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nShift packed 16-bit integers in a right by count while …\nShift packed 32-bit integers in a right by count while …\nShift packed 64-bit integers in a right by count while …\nShift packed 16-bit integers in a right by imm8 while …\nShift packed 32-bit integers in a right by imm8 while …\nShift packed 64-bit integers in a right by imm8 while …\nShift packed 16-bit integers in a right by the amount …\nShift packed 32-bit integers in a right by the amount …\nShift packed 64-bit integers in a right by the amount …\nStore 512-bits (composed of 16 packed 32-bit integers) …\nStore 512-bits (composed of 8 packed 64-bit integers) from …\nStore 512-bits (composed of 8 packed double-precision …\nStore 512-bits (composed of 32 packed half-precision …\nStore 512-bits of integer data from a into memory. …\nStore 512-bits of integer data from a into memory. …\nStore 512-bits (composed of 32 packed 16-bit integers) …\nStore 512-bits (composed of 16 packed 32-bit integers) …\nStore 512-bits (composed of 8 packed 64-bit integers) from …\nStore 512-bits (composed of 64 packed 8-bit integers) from …\nStores 512-bits (composed of 8 packed double-precision …\nStore 512-bits (composed of 32 packed half-precision …\nStores 512-bits (composed of 16 packed single-precision …\nStore 512-bits of integer data from a into memory. …\nLoad 512-bits of integer data from memory into dst using a …\nStore 512-bits (composed of 8 packed double-precision …\nStore 512-bits (composed of 16 packed single-precision …\nStore 512-bits of integer data from a into memory using a …\nSubtract packed 16-bit integers in b from packed 16-bit …\nSubtract packed 32-bit integers in b from packed 32-bit …\nSubtract packed 64-bit integers in b from packed 64-bit …\nSubtract packed 8-bit integers in b from packed 8-bit …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed double-precision (64-bit) floating-point …\nSubtract packed half-precision (16-bit) floating-point …\nSubtract packed single-precision (32-bit) floating-point …\nSubtract packed signed 16-bit integers in b from packed …\nSubtract packed signed 8-bit integers in b from packed …\nSubtract packed unsigned 16-bit integers in b from packed …\nSubtract packed unsigned 8-bit integers in b from packed …\nBitwise ternary logic that provides the capability to …\nBitwise ternary logic that provides the capability to …\nCompute the bitwise AND of packed 16-bit integers in a and …\nCompute the bitwise AND of packed 32-bit integers in a and …\nCompute the bitwise AND of packed 64-bit integers in a and …\nCompute the bitwise AND of packed 8-bit integers in a and …\nCompute the bitwise NAND of packed 16-bit integers in a …\nCompute the bitwise NAND of packed 32-bit integers in a …\nCompute the bitwise NAND of packed 64-bit integers in a …\nCompute the bitwise NAND of packed 8-bit integers in a and …\nReturn vector of type __m512 with indeterminate elements. …\nReturn vector of type __m512i with indeterminate elements. …\nReturns vector of type <code>__m512d</code> with indeterminate elements.\nReturn vector of type <code>__m512h</code> with indetermination …\nReturns vector of type <code>__m512</code> with indeterminate elements. …\nUnpack and interleave 16-bit integers from the high half …\nUnpack and interleave 32-bit integers from the high half …\nUnpack and interleave 64-bit integers from the high half …\nUnpack and interleave 8-bit integers from the high half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nUnpack and interleave 16-bit integers from the low half of …\nUnpack and interleave 32-bit integers from the low half of …\nUnpack and interleave 64-bit integers from the low half of …\nUnpack and interleave 8-bit integers from the low half of …\nUnpack and interleave double-precision (64-bit) …\nUnpack and interleave single-precision (32-bit) …\nCompute the bitwise XOR of packed 32-bit integers in a and …\nCompute the bitwise XOR of packed 64-bit integers in a and …\nCompute the bitwise XOR of packed double-precision …\nCompute the bitwise XOR of packed single-precision …\nCompute the bitwise XOR of 512 bits (representing integer …\nCast vector of type __m128d to type __m512d; the upper 384 …\nCast vector of type __m256d to type __m512d; the upper 256 …\nCast vector of type <code>__m128h</code> to type <code>__m512h</code>. The upper 24 …\nCast vector of type <code>__m256h</code> to type <code>__m512h</code>. The upper 16 …\nCast vector of type __m128 to type __m512; the upper 384 …\nCast vector of type __m256 to type __m512; the upper 256 …")